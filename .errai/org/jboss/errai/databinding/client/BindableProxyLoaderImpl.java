package org.jboss.errai.databinding.client;

import com.cloderia.helion.client.shared.model.Accountingperiod;
import com.cloderia.helion.client.shared.model.Accountingtransaction;
import com.cloderia.helion.client.shared.model.Accountingtransactiondetail;
import com.cloderia.helion.client.shared.model.Accountingtransactiontype;
import com.cloderia.helion.client.shared.model.Agreement;
import com.cloderia.helion.client.shared.model.Agreementitem;
import com.cloderia.helion.client.shared.model.Agreementitemtype;
import com.cloderia.helion.client.shared.model.Agreementrole;
import com.cloderia.helion.client.shared.model.Agreementroletype;
import com.cloderia.helion.client.shared.model.Agreementterm;
import com.cloderia.helion.client.shared.model.Agreementtype;
import com.cloderia.helion.client.shared.model.Billingaccount;
import com.cloderia.helion.client.shared.model.Budget;
import com.cloderia.helion.client.shared.model.Budgetitem;
import com.cloderia.helion.client.shared.model.Budgetitemtype;
import com.cloderia.helion.client.shared.model.Budgetstatus;
import com.cloderia.helion.client.shared.model.Budgetstatustype;
import com.cloderia.helion.client.shared.model.Budgettype;
import com.cloderia.helion.client.shared.model.Contactmechanism;
import com.cloderia.helion.client.shared.model.Contactmechanismpurposetype;
import com.cloderia.helion.client.shared.model.Contactmechanismtype;
import com.cloderia.helion.client.shared.model.Container;
import com.cloderia.helion.client.shared.model.Containertype;
import com.cloderia.helion.client.shared.model.Depreciationmethod;
import com.cloderia.helion.client.shared.model.Document;
import com.cloderia.helion.client.shared.model.Documenttype;
import com.cloderia.helion.client.shared.model.Facility;
import com.cloderia.helion.client.shared.model.Facilitytype;
import com.cloderia.helion.client.shared.model.Financialaccount;
import com.cloderia.helion.client.shared.model.Financialaccountrole;
import com.cloderia.helion.client.shared.model.Financialaccountroletype;
import com.cloderia.helion.client.shared.model.Financialaccounttransaction;
import com.cloderia.helion.client.shared.model.Financialaccounttransactiontype;
import com.cloderia.helion.client.shared.model.Financialaccounttype;
import com.cloderia.helion.client.shared.model.Fixedasset;
import com.cloderia.helion.client.shared.model.Fixedassetdepreciationmethod;
import com.cloderia.helion.client.shared.model.Fixedassettype;
import com.cloderia.helion.client.shared.model.Generalledgeraccount;
import com.cloderia.helion.client.shared.model.Generalledgeraccounttype;
import com.cloderia.helion.client.shared.model.Geoboundry;
import com.cloderia.helion.client.shared.model.Geoboundrytype;
import com.cloderia.helion.client.shared.model.Glbudgetxref;
import com.cloderia.helion.client.shared.model.Inventoryitem;
import com.cloderia.helion.client.shared.model.Inventoryitemstatus;
import com.cloderia.helion.client.shared.model.Inventoryitemtype;
import com.cloderia.helion.client.shared.model.Invoice;
import com.cloderia.helion.client.shared.model.Invoiceitem;
import com.cloderia.helion.client.shared.model.Invoiceitemtype;
import com.cloderia.helion.client.shared.model.Invoiceroletype;
import com.cloderia.helion.client.shared.model.Invoicestatus;
import com.cloderia.helion.client.shared.model.Invoicestatustype;
import com.cloderia.helion.client.shared.model.Invoiceterm;
import com.cloderia.helion.client.shared.model.Lot;
import com.cloderia.helion.client.shared.model.Organization;
import com.cloderia.helion.client.shared.model.Organizationgeneralledgeraccount;
import com.cloderia.helion.client.shared.model.Organizationglaccountbalance;
import com.cloderia.helion.client.shared.model.Party;
import com.cloderia.helion.client.shared.model.Partycategory;
import com.cloderia.helion.client.shared.model.Partyrelationship;
import com.cloderia.helion.client.shared.model.Partyrelationshipstatus;
import com.cloderia.helion.client.shared.model.Partyrelationshiptype;
import com.cloderia.helion.client.shared.model.Partyrole;
import com.cloderia.helion.client.shared.model.Partyroletype;
import com.cloderia.helion.client.shared.model.Partytype;
import com.cloderia.helion.client.shared.model.Payment;
import com.cloderia.helion.client.shared.model.Paymentapplication;
import com.cloderia.helion.client.shared.model.Paymentmethodtype;
import com.cloderia.helion.client.shared.model.Paymenttype;
import com.cloderia.helion.client.shared.model.Periodtype;
import com.cloderia.helion.client.shared.model.Person;
import com.cloderia.helion.client.shared.model.Preferencetype;
import com.cloderia.helion.client.shared.model.Product;
import com.cloderia.helion.client.shared.model.Productcategory;
import com.cloderia.helion.client.shared.model.Productcategorytype;
import com.cloderia.helion.client.shared.model.Productfeature;
import com.cloderia.helion.client.shared.model.Productfeaturecategory;
import com.cloderia.helion.client.shared.model.Productfeaturetype;
import com.cloderia.helion.client.shared.model.Producttype;
import com.cloderia.helion.client.shared.model.Ratingtype;
import com.cloderia.helion.client.shared.model.Standardtimeperiod;
import com.cloderia.helion.client.shared.model.Supplierproduct;
import com.cloderia.helion.client.shared.model.Systemuser;
import com.cloderia.helion.client.shared.model.Terminationreason;
import com.cloderia.helion.client.shared.model.Terminationtype;
import com.cloderia.helion.client.shared.model.Termtype;
import com.cloderia.helion.client.shared.model.Universe;
import com.cloderia.helion.client.shared.model.Uom;
import com.cloderia.helion.client.shared.model.Uomconversion;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.jboss.errai.databinding.client.api.StateSync;
import org.jboss.errai.ui.shared.api.Locale;

public class BindableProxyLoaderImpl implements BindableProxyLoader { public void loadBindableProxies() {
    class com_cloderia_helion_client_shared_model_PartytypeProxy extends Partytype implements BindableProxy {
      private BindableProxyAgent<Partytype> agent;
      public com_cloderia_helion_client_shared_model_PartytypeProxy() {
        this(new Partytype());
      }

      public com_cloderia_helion_client_shared_model_PartytypeProxy(Partytype target) {
        agent = new BindableProxyAgent<Partytype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("parentType", new PropertyType(Partytype.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("parentCategory", new PropertyType(Partycategory.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partytype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partytype unwrap() {
        return agent.target;
      }

      public Partytype deepUnwrap() {
        final Partytype clone = new Partytype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getParentType() instanceof BindableProxy) {
          clone.setParentType((Partytype) ((BindableProxy) getParentType()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentType())) {
          clone.setParentType((Partytype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentType())).deepUnwrap());
        } else {
          clone.setParentType(agent.target.getParentType());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getParentCategory() instanceof BindableProxy) {
          clone.setParentCategory((Partycategory) ((BindableProxy) getParentCategory()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentCategory())) {
          clone.setParentCategory((Partycategory) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentCategory())).deepUnwrap());
        } else {
          clone.setParentCategory(agent.target.getParentCategory());
        }
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartytypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartytypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Partytype getParentType() {
        return agent.target.getParentType();
      }

      public void setParentType(Partytype parentType) {
        if (agent.binders.containsKey("parentType")) {
          parentType = (Partytype) agent.binders.get("parentType").setModel(parentType, StateSync.FROM_MODEL, true);
        }
        Partytype oldValue = agent.target.getParentType();
        agent.target.setParentType(parentType);
        agent.updateWidgetsAndFireEvent(false, "parentType", oldValue, parentType);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Partycategory getParentCategory() {
        return agent.target.getParentCategory();
      }

      public void setParentCategory(Partycategory parentCategory) {
        if (agent.binders.containsKey("parentCategory")) {
          parentCategory = (Partycategory) agent.binders.get("parentCategory").setModel(parentCategory, StateSync.FROM_MODEL, true);
        }
        Partycategory oldValue = agent.target.getParentCategory();
        agent.target.setParentCategory(parentCategory);
        agent.updateWidgetsAndFireEvent(false, "parentCategory", oldValue, parentCategory);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("parentType")) {
          return getParentType();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("parentCategory")) {
          return getParentCategory();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("parentType")) {
          agent.target.setParentType((Partytype) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("parentCategory")) {
          agent.target.setParentCategory((Partycategory) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partytype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partytype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartytypeProxy((Partytype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartytypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_OrganizationProxy extends Organization implements BindableProxy {
      private BindableProxyAgent<Organization> agent;
      public com_cloderia_helion_client_shared_model_OrganizationProxy() {
        this(new Organization());
      }

      public com_cloderia_helion_client_shared_model_OrganizationProxy(Organization target) {
        agent = new BindableProxyAgent<Organization>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("tax", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("businessNo", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Organization.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Organization unwrap() {
        return agent.target;
      }

      public Organization deepUnwrap() {
        final Organization clone = new Organization();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setTax(agent.target.getTax());
        clone.setBusinessNo(agent.target.getBusinessNo());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_OrganizationProxy) {
          obj = ((com_cloderia_helion_client_shared_model_OrganizationProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public String getTax() {
        return agent.target.getTax();
      }

      public void setTax(String tax) {
        String oldValue = agent.target.getTax();
        agent.target.setTax(tax);
        agent.updateWidgetsAndFireEvent(false, "tax", oldValue, tax);
      }

      public String getBusinessNo() {
        return agent.target.getBusinessNo();
      }

      public void setBusinessNo(String businessNo) {
        String oldValue = agent.target.getBusinessNo();
        agent.target.setBusinessNo(businessNo);
        agent.updateWidgetsAndFireEvent(false, "businessNo", oldValue, businessNo);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("tax")) {
          return getTax();
        }
        if (property.equals("businessNo")) {
          return getBusinessNo();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("tax")) {
          agent.target.setTax((String) value);
          return;
        }
        if (property.equals("businessNo")) {
          agent.target.setBusinessNo((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Organization) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Organization.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_OrganizationProxy((Organization) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_OrganizationProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ContactmechanismProxy extends Contactmechanism implements BindableProxy {
      private BindableProxyAgent<Contactmechanism> agent;
      public com_cloderia_helion_client_shared_model_ContactmechanismProxy() {
        this(new Contactmechanism());
      }

      public com_cloderia_helion_client_shared_model_ContactmechanismProxy(Contactmechanism target) {
        agent = new BindableProxyAgent<Contactmechanism>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("contMechTy", new PropertyType(Contactmechanismtype.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Contactmechanism.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Contactmechanism unwrap() {
        return agent.target;
      }

      public Contactmechanism deepUnwrap() {
        final Contactmechanism clone = new Contactmechanism();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getContMechTy() instanceof BindableProxy) {
          clone.setContMechTy((Contactmechanismtype) ((BindableProxy) getContMechTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getContMechTy())) {
          clone.setContMechTy((Contactmechanismtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getContMechTy())).deepUnwrap());
        } else {
          clone.setContMechTy(agent.target.getContMechTy());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ContactmechanismProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ContactmechanismProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Contactmechanismtype getContMechTy() {
        return agent.target.getContMechTy();
      }

      public void setContMechTy(Contactmechanismtype contMechTy) {
        if (agent.binders.containsKey("contMechTy")) {
          contMechTy = (Contactmechanismtype) agent.binders.get("contMechTy").setModel(contMechTy, StateSync.FROM_MODEL, true);
        }
        Contactmechanismtype oldValue = agent.target.getContMechTy();
        agent.target.setContMechTy(contMechTy);
        agent.updateWidgetsAndFireEvent(false, "contMechTy", oldValue, contMechTy);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("contMechTy")) {
          return getContMechTy();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("contMechTy")) {
          agent.target.setContMechTy((Contactmechanismtype) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Contactmechanism) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Contactmechanism.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ContactmechanismProxy((Contactmechanism) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ContactmechanismProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PersonProxy extends Person implements BindableProxy {
      private BindableProxyAgent<Person> agent;
      public com_cloderia_helion_client_shared_model_PersonProxy() {
        this(new Person());
      }

      public com_cloderia_helion_client_shared_model_PersonProxy(Person target) {
        agent = new BindableProxyAgent<Person>(this, target);
        agent.propertyTypes.put("passportNo", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("gender", new PropertyType(Boolean.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("taxPin", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("firstNm", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastNm", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("weigth", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("middleNm", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("passportExpDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("height", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Person.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Person unwrap() {
        return agent.target;
      }

      public Person deepUnwrap() {
        final Person clone = new Person();
        clone.setPassportNo(agent.target.getPassportNo());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setGender(agent.target.getGender());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setTaxPin(agent.target.getTaxPin());
        clone.setFirstNm(agent.target.getFirstNm());
        clone.setLastNm(agent.target.getLastNm());
        clone.setWeigth(agent.target.getWeigth());
        clone.setMiddleNm(agent.target.getMiddleNm());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setPassportExpDt(agent.target.getPassportExpDt());
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        clone.setHeight(agent.target.getHeight());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PersonProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PersonProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getPassportNo() {
        return agent.target.getPassportNo();
      }

      public void setPassportNo(String passportNo) {
        String oldValue = agent.target.getPassportNo();
        agent.target.setPassportNo(passportNo);
        agent.updateWidgetsAndFireEvent(false, "passportNo", oldValue, passportNo);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Boolean getGender() {
        return agent.target.getGender();
      }

      public void setGender(Boolean gender) {
        Boolean oldValue = agent.target.getGender();
        agent.target.setGender(gender);
        agent.updateWidgetsAndFireEvent(false, "gender", oldValue, gender);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getTaxPin() {
        return agent.target.getTaxPin();
      }

      public void setTaxPin(String taxPin) {
        String oldValue = agent.target.getTaxPin();
        agent.target.setTaxPin(taxPin);
        agent.updateWidgetsAndFireEvent(false, "taxPin", oldValue, taxPin);
      }

      public String getFirstNm() {
        return agent.target.getFirstNm();
      }

      public void setFirstNm(String firstNm) {
        String oldValue = agent.target.getFirstNm();
        agent.target.setFirstNm(firstNm);
        agent.updateWidgetsAndFireEvent(false, "firstNm", oldValue, firstNm);
      }

      public String getLastNm() {
        return agent.target.getLastNm();
      }

      public void setLastNm(String lastNm) {
        String oldValue = agent.target.getLastNm();
        agent.target.setLastNm(lastNm);
        agent.updateWidgetsAndFireEvent(false, "lastNm", oldValue, lastNm);
      }

      public Integer getWeigth() {
        return agent.target.getWeigth();
      }

      public void setWeigth(Integer weigth) {
        Integer oldValue = agent.target.getWeigth();
        agent.target.setWeigth(weigth);
        agent.updateWidgetsAndFireEvent(false, "weigth", oldValue, weigth);
      }

      public String getMiddleNm() {
        return agent.target.getMiddleNm();
      }

      public void setMiddleNm(String middleNm) {
        String oldValue = agent.target.getMiddleNm();
        agent.target.setMiddleNm(middleNm);
        agent.updateWidgetsAndFireEvent(false, "middleNm", oldValue, middleNm);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Date getPassportExpDt() {
        return agent.target.getPassportExpDt();
      }

      public void setPassportExpDt(Date passportExpDt) {
        Date oldValue = agent.target.getPassportExpDt();
        agent.target.setPassportExpDt(passportExpDt);
        agent.updateWidgetsAndFireEvent(false, "passportExpDt", oldValue, passportExpDt);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Integer getHeight() {
        return agent.target.getHeight();
      }

      public void setHeight(Integer height) {
        Integer oldValue = agent.target.getHeight();
        agent.target.setHeight(height);
        agent.updateWidgetsAndFireEvent(false, "height", oldValue, height);
      }

      public Object get(String property) {
        if (property.equals("passportNo")) {
          return getPassportNo();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("gender")) {
          return getGender();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("taxPin")) {
          return getTaxPin();
        }
        if (property.equals("firstNm")) {
          return getFirstNm();
        }
        if (property.equals("lastNm")) {
          return getLastNm();
        }
        if (property.equals("weigth")) {
          return getWeigth();
        }
        if (property.equals("middleNm")) {
          return getMiddleNm();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("passportExpDt")) {
          return getPassportExpDt();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("height")) {
          return getHeight();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("passportNo")) {
          agent.target.setPassportNo((String) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("gender")) {
          agent.target.setGender((Boolean) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("taxPin")) {
          agent.target.setTaxPin((String) value);
          return;
        }
        if (property.equals("firstNm")) {
          agent.target.setFirstNm((String) value);
          return;
        }
        if (property.equals("lastNm")) {
          agent.target.setLastNm((String) value);
          return;
        }
        if (property.equals("weigth")) {
          agent.target.setWeigth((Integer) value);
          return;
        }
        if (property.equals("middleNm")) {
          agent.target.setMiddleNm((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("passportExpDt")) {
          agent.target.setPassportExpDt((Date) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("height")) {
          agent.target.setHeight((Integer) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Person) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Person.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PersonProxy((Person) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PersonProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy extends Generalledgeraccount implements BindableProxy {
      private BindableProxyAgent<Generalledgeraccount> agent;
      public com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy() {
        this(new Generalledgeraccount());
      }

      public com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy(Generalledgeraccount target) {
        agent = new BindableProxyAgent<Generalledgeraccount>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("glAcctTy", new PropertyType(Generalledgeraccounttype.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Generalledgeraccount.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Generalledgeraccount unwrap() {
        return agent.target;
      }

      public Generalledgeraccount deepUnwrap() {
        final Generalledgeraccount clone = new Generalledgeraccount();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getGlAcctTy() instanceof BindableProxy) {
          clone.setGlAcctTy((Generalledgeraccounttype) ((BindableProxy) getGlAcctTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getGlAcctTy())) {
          clone.setGlAcctTy((Generalledgeraccounttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getGlAcctTy())).deepUnwrap());
        } else {
          clone.setGlAcctTy(agent.target.getGlAcctTy());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy) {
          obj = ((com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Generalledgeraccounttype getGlAcctTy() {
        return agent.target.getGlAcctTy();
      }

      public void setGlAcctTy(Generalledgeraccounttype glAcctTy) {
        if (agent.binders.containsKey("glAcctTy")) {
          glAcctTy = (Generalledgeraccounttype) agent.binders.get("glAcctTy").setModel(glAcctTy, StateSync.FROM_MODEL, true);
        }
        Generalledgeraccounttype oldValue = agent.target.getGlAcctTy();
        agent.target.setGlAcctTy(glAcctTy);
        agent.updateWidgetsAndFireEvent(false, "glAcctTy", oldValue, glAcctTy);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("glAcctTy")) {
          return getGlAcctTy();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("glAcctTy")) {
          agent.target.setGlAcctTy((Generalledgeraccounttype) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Generalledgeraccount) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Generalledgeraccount.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy((Generalledgeraccount) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_GeneralledgeraccountProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_TerminationtypeProxy extends Terminationtype implements BindableProxy {
      private BindableProxyAgent<Terminationtype> agent;
      public com_cloderia_helion_client_shared_model_TerminationtypeProxy() {
        this(new Terminationtype());
      }

      public com_cloderia_helion_client_shared_model_TerminationtypeProxy(Terminationtype target) {
        agent = new BindableProxyAgent<Terminationtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Terminationtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Terminationtype unwrap() {
        return agent.target;
      }

      public Terminationtype deepUnwrap() {
        final Terminationtype clone = new Terminationtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_TerminationtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_TerminationtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Terminationtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Terminationtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_TerminationtypeProxy((Terminationtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_TerminationtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_StandardtimeperiodProxy extends Standardtimeperiod implements BindableProxy {
      private BindableProxyAgent<Standardtimeperiod> agent;
      public com_cloderia_helion_client_shared_model_StandardtimeperiodProxy() {
        this(new Standardtimeperiod());
      }

      public com_cloderia_helion_client_shared_model_StandardtimeperiodProxy(Standardtimeperiod target) {
        agent = new BindableProxyAgent<Standardtimeperiod>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("periodTy", new PropertyType(Periodtype.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Standardtimeperiod.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Standardtimeperiod unwrap() {
        return agent.target;
      }

      public Standardtimeperiod deepUnwrap() {
        final Standardtimeperiod clone = new Standardtimeperiod();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getPeriodTy() instanceof BindableProxy) {
          clone.setPeriodTy((Periodtype) ((BindableProxy) getPeriodTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPeriodTy())) {
          clone.setPeriodTy((Periodtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPeriodTy())).deepUnwrap());
        } else {
          clone.setPeriodTy(agent.target.getPeriodTy());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_StandardtimeperiodProxy) {
          obj = ((com_cloderia_helion_client_shared_model_StandardtimeperiodProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Periodtype getPeriodTy() {
        return agent.target.getPeriodTy();
      }

      public void setPeriodTy(Periodtype periodTy) {
        if (agent.binders.containsKey("periodTy")) {
          periodTy = (Periodtype) agent.binders.get("periodTy").setModel(periodTy, StateSync.FROM_MODEL, true);
        }
        Periodtype oldValue = agent.target.getPeriodTy();
        agent.target.setPeriodTy(periodTy);
        agent.updateWidgetsAndFireEvent(false, "periodTy", oldValue, periodTy);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("periodTy")) {
          return getPeriodTy();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("periodTy")) {
          agent.target.setPeriodTy((Periodtype) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Standardtimeperiod) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Standardtimeperiod.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_StandardtimeperiodProxy((Standardtimeperiod) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_StandardtimeperiodProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_DocumentProxy extends Document implements BindableProxy {
      private BindableProxyAgent<Document> agent;
      public com_cloderia_helion_client_shared_model_DocumentProxy() {
        this(new Document());
      }

      public com_cloderia_helion_client_shared_model_DocumentProxy(Document target) {
        agent = new BindableProxyAgent<Document>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("docTy", new PropertyType(Documenttype.class, true, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Document.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Document unwrap() {
        return agent.target;
      }

      public Document deepUnwrap() {
        final Document clone = new Document();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getDocTy() instanceof BindableProxy) {
          clone.setDocTy((Documenttype) ((BindableProxy) getDocTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getDocTy())) {
          clone.setDocTy((Documenttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getDocTy())).deepUnwrap());
        } else {
          clone.setDocTy(agent.target.getDocTy());
        }
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_DocumentProxy) {
          obj = ((com_cloderia_helion_client_shared_model_DocumentProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Documenttype getDocTy() {
        return agent.target.getDocTy();
      }

      public void setDocTy(Documenttype docTy) {
        if (agent.binders.containsKey("docTy")) {
          docTy = (Documenttype) agent.binders.get("docTy").setModel(docTy, StateSync.FROM_MODEL, true);
        }
        Documenttype oldValue = agent.target.getDocTy();
        agent.target.setDocTy(docTy);
        agent.updateWidgetsAndFireEvent(false, "docTy", oldValue, docTy);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("docTy")) {
          return getDocTy();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("docTy")) {
          agent.target.setDocTy((Documenttype) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Document) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Document.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_DocumentProxy((Document) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_DocumentProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgetProxy extends Budget implements BindableProxy {
      private BindableProxyAgent<Budget> agent;
      public com_cloderia_helion_client_shared_model_BudgetProxy() {
        this(new Budget());
      }

      public com_cloderia_helion_client_shared_model_BudgetProxy(Budget target) {
        agent = new BindableProxyAgent<Budget>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("period", new PropertyType(Standardtimeperiod.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Budget.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budget unwrap() {
        return agent.target;
      }

      public Budget deepUnwrap() {
        final Budget clone = new Budget();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getPeriod() instanceof BindableProxy) {
          clone.setPeriod((Standardtimeperiod) ((BindableProxy) getPeriod()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPeriod())) {
          clone.setPeriod((Standardtimeperiod) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPeriod())).deepUnwrap());
        } else {
          clone.setPeriod(agent.target.getPeriod());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgetProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgetProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Standardtimeperiod getPeriod() {
        return agent.target.getPeriod();
      }

      public void setPeriod(Standardtimeperiod period) {
        if (agent.binders.containsKey("period")) {
          period = (Standardtimeperiod) agent.binders.get("period").setModel(period, StateSync.FROM_MODEL, true);
        }
        Standardtimeperiod oldValue = agent.target.getPeriod();
        agent.target.setPeriod(period);
        agent.updateWidgetsAndFireEvent(false, "period", oldValue, period);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("period")) {
          return getPeriod();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("period")) {
          agent.target.setPeriod((Standardtimeperiod) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budget) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budget.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgetProxy((Budget) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgetProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgetitemtypeProxy extends Budgetitemtype implements BindableProxy {
      private BindableProxyAgent<Budgetitemtype> agent;
      public com_cloderia_helion_client_shared_model_BudgetitemtypeProxy() {
        this(new Budgetitemtype());
      }

      public com_cloderia_helion_client_shared_model_BudgetitemtypeProxy(Budgetitemtype target) {
        agent = new BindableProxyAgent<Budgetitemtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Budgetitemtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budgetitemtype unwrap() {
        return agent.target;
      }

      public Budgetitemtype deepUnwrap() {
        final Budgetitemtype clone = new Budgetitemtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgetitemtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgetitemtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budgetitemtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budgetitemtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgetitemtypeProxy((Budgetitemtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgetitemtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FacilityProxy extends Facility implements BindableProxy {
      private BindableProxyAgent<Facility> agent;
      public com_cloderia_helion_client_shared_model_FacilityProxy() {
        this(new Facility());
      }

      public com_cloderia_helion_client_shared_model_FacilityProxy(Facility target) {
        agent = new BindableProxyAgent<Facility>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("facilityTy", new PropertyType(Facilitytype.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Facility.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Facility unwrap() {
        return agent.target;
      }

      public Facility deepUnwrap() {
        final Facility clone = new Facility();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getFacilityTy() instanceof BindableProxy) {
          clone.setFacilityTy((Facilitytype) ((BindableProxy) getFacilityTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFacilityTy())) {
          clone.setFacilityTy((Facilitytype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFacilityTy())).deepUnwrap());
        } else {
          clone.setFacilityTy(agent.target.getFacilityTy());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FacilityProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FacilityProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Facilitytype getFacilityTy() {
        return agent.target.getFacilityTy();
      }

      public void setFacilityTy(Facilitytype facilityTy) {
        if (agent.binders.containsKey("facilityTy")) {
          facilityTy = (Facilitytype) agent.binders.get("facilityTy").setModel(facilityTy, StateSync.FROM_MODEL, true);
        }
        Facilitytype oldValue = agent.target.getFacilityTy();
        agent.target.setFacilityTy(facilityTy);
        agent.updateWidgetsAndFireEvent(false, "facilityTy", oldValue, facilityTy);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("facilityTy")) {
          return getFacilityTy();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("facilityTy")) {
          agent.target.setFacilityTy((Facilitytype) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Facility) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Facility.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FacilityProxy((Facility) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FacilityProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductcategorytypeProxy extends Productcategorytype implements BindableProxy {
      private BindableProxyAgent<Productcategorytype> agent;
      public com_cloderia_helion_client_shared_model_ProductcategorytypeProxy() {
        this(new Productcategorytype());
      }

      public com_cloderia_helion_client_shared_model_ProductcategorytypeProxy(Productcategorytype target) {
        agent = new BindableProxyAgent<Productcategorytype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Productcategorytype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Productcategorytype unwrap() {
        return agent.target;
      }

      public Productcategorytype deepUnwrap() {
        final Productcategorytype clone = new Productcategorytype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductcategorytypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductcategorytypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Productcategorytype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Productcategorytype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductcategorytypeProxy((Productcategorytype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductcategorytypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_UomconversionProxy extends Uomconversion implements BindableProxy {
      private BindableProxyAgent<Uomconversion> agent;
      public com_cloderia_helion_client_shared_model_UomconversionProxy() {
        this(new Uomconversion());
      }

      public com_cloderia_helion_client_shared_model_UomconversionProxy(Uomconversion target) {
        agent = new BindableProxyAgent<Uomconversion>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("conversionFactor", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("toUom", new PropertyType(Uom.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("fromUom", new PropertyType(Uom.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Uomconversion.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Uomconversion unwrap() {
        return agent.target;
      }

      public Uomconversion deepUnwrap() {
        final Uomconversion clone = new Uomconversion();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setConversionFactor(agent.target.getConversionFactor());
        if (agent.target.getToUom() instanceof BindableProxy) {
          clone.setToUom((Uom) ((BindableProxy) getToUom()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToUom())) {
          clone.setToUom((Uom) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToUom())).deepUnwrap());
        } else {
          clone.setToUom(agent.target.getToUom());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getFromUom() instanceof BindableProxy) {
          clone.setFromUom((Uom) ((BindableProxy) getFromUom()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFromUom())) {
          clone.setFromUom((Uom) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFromUom())).deepUnwrap());
        } else {
          clone.setFromUom(agent.target.getFromUom());
        }
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_UomconversionProxy) {
          obj = ((com_cloderia_helion_client_shared_model_UomconversionProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Integer getConversionFactor() {
        return agent.target.getConversionFactor();
      }

      public void setConversionFactor(Integer conversionFactor) {
        Integer oldValue = agent.target.getConversionFactor();
        agent.target.setConversionFactor(conversionFactor);
        agent.updateWidgetsAndFireEvent(false, "conversionFactor", oldValue, conversionFactor);
      }

      public Uom getToUom() {
        return agent.target.getToUom();
      }

      public void setToUom(Uom toUom) {
        if (agent.binders.containsKey("toUom")) {
          toUom = (Uom) agent.binders.get("toUom").setModel(toUom, StateSync.FROM_MODEL, true);
        }
        Uom oldValue = agent.target.getToUom();
        agent.target.setToUom(toUom);
        agent.updateWidgetsAndFireEvent(false, "toUom", oldValue, toUom);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Uom getFromUom() {
        return agent.target.getFromUom();
      }

      public void setFromUom(Uom fromUom) {
        if (agent.binders.containsKey("fromUom")) {
          fromUom = (Uom) agent.binders.get("fromUom").setModel(fromUom, StateSync.FROM_MODEL, true);
        }
        Uom oldValue = agent.target.getFromUom();
        agent.target.setFromUom(fromUom);
        agent.updateWidgetsAndFireEvent(false, "fromUom", oldValue, fromUom);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("conversionFactor")) {
          return getConversionFactor();
        }
        if (property.equals("toUom")) {
          return getToUom();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("fromUom")) {
          return getFromUom();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("conversionFactor")) {
          agent.target.setConversionFactor((Integer) value);
          return;
        }
        if (property.equals("toUom")) {
          agent.target.setToUom((Uom) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("fromUom")) {
          agent.target.setFromUom((Uom) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Uomconversion) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Uomconversion.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_UomconversionProxy((Uomconversion) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_UomconversionProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PaymentapplicationProxy extends Paymentapplication implements BindableProxy {
      private BindableProxyAgent<Paymentapplication> agent;
      public com_cloderia_helion_client_shared_model_PaymentapplicationProxy() {
        this(new Paymentapplication());
      }

      public com_cloderia_helion_client_shared_model_PaymentapplicationProxy(Paymentapplication target) {
        agent = new BindableProxyAgent<Paymentapplication>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("amountApplied", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("billingAcct", new PropertyType(Billingaccount.class, true, false));
        agent.propertyTypes.put("invoiceItem", new PropertyType(Invoiceitem.class, true, false));
        agent.propertyTypes.put("payment", new PropertyType(Payment.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("invoice", new PropertyType(Invoice.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Paymentapplication.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Paymentapplication unwrap() {
        return agent.target;
      }

      public Paymentapplication deepUnwrap() {
        final Paymentapplication clone = new Paymentapplication();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setAmountApplied(agent.target.getAmountApplied());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getBillingAcct() instanceof BindableProxy) {
          clone.setBillingAcct((Billingaccount) ((BindableProxy) getBillingAcct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getBillingAcct())) {
          clone.setBillingAcct((Billingaccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getBillingAcct())).deepUnwrap());
        } else {
          clone.setBillingAcct(agent.target.getBillingAcct());
        }
        if (agent.target.getInvoiceItem() instanceof BindableProxy) {
          clone.setInvoiceItem((Invoiceitem) ((BindableProxy) getInvoiceItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoiceItem())) {
          clone.setInvoiceItem((Invoiceitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoiceItem())).deepUnwrap());
        } else {
          clone.setInvoiceItem(agent.target.getInvoiceItem());
        }
        if (agent.target.getPayment() instanceof BindableProxy) {
          clone.setPayment((Payment) ((BindableProxy) getPayment()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPayment())) {
          clone.setPayment((Payment) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPayment())).deepUnwrap());
        } else {
          clone.setPayment(agent.target.getPayment());
        }
        clone.setId(agent.target.getId());
        if (agent.target.getInvoice() instanceof BindableProxy) {
          clone.setInvoice((Invoice) ((BindableProxy) getInvoice()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoice())) {
          clone.setInvoice((Invoice) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoice())).deepUnwrap());
        } else {
          clone.setInvoice(agent.target.getInvoice());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PaymentapplicationProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PaymentapplicationProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public BigDecimal getAmountApplied() {
        return agent.target.getAmountApplied();
      }

      public void setAmountApplied(BigDecimal amountApplied) {
        BigDecimal oldValue = agent.target.getAmountApplied();
        agent.target.setAmountApplied(amountApplied);
        agent.updateWidgetsAndFireEvent(false, "amountApplied", oldValue, amountApplied);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Billingaccount getBillingAcct() {
        return agent.target.getBillingAcct();
      }

      public void setBillingAcct(Billingaccount billingAcct) {
        if (agent.binders.containsKey("billingAcct")) {
          billingAcct = (Billingaccount) agent.binders.get("billingAcct").setModel(billingAcct, StateSync.FROM_MODEL, true);
        }
        Billingaccount oldValue = agent.target.getBillingAcct();
        agent.target.setBillingAcct(billingAcct);
        agent.updateWidgetsAndFireEvent(false, "billingAcct", oldValue, billingAcct);
      }

      public Invoiceitem getInvoiceItem() {
        return agent.target.getInvoiceItem();
      }

      public void setInvoiceItem(Invoiceitem invoiceItem) {
        if (agent.binders.containsKey("invoiceItem")) {
          invoiceItem = (Invoiceitem) agent.binders.get("invoiceItem").setModel(invoiceItem, StateSync.FROM_MODEL, true);
        }
        Invoiceitem oldValue = agent.target.getInvoiceItem();
        agent.target.setInvoiceItem(invoiceItem);
        agent.updateWidgetsAndFireEvent(false, "invoiceItem", oldValue, invoiceItem);
      }

      public Payment getPayment() {
        return agent.target.getPayment();
      }

      public void setPayment(Payment payment) {
        if (agent.binders.containsKey("payment")) {
          payment = (Payment) agent.binders.get("payment").setModel(payment, StateSync.FROM_MODEL, true);
        }
        Payment oldValue = agent.target.getPayment();
        agent.target.setPayment(payment);
        agent.updateWidgetsAndFireEvent(false, "payment", oldValue, payment);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Invoice getInvoice() {
        return agent.target.getInvoice();
      }

      public void setInvoice(Invoice invoice) {
        if (agent.binders.containsKey("invoice")) {
          invoice = (Invoice) agent.binders.get("invoice").setModel(invoice, StateSync.FROM_MODEL, true);
        }
        Invoice oldValue = agent.target.getInvoice();
        agent.target.setInvoice(invoice);
        agent.updateWidgetsAndFireEvent(false, "invoice", oldValue, invoice);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("amountApplied")) {
          return getAmountApplied();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("billingAcct")) {
          return getBillingAcct();
        }
        if (property.equals("invoiceItem")) {
          return getInvoiceItem();
        }
        if (property.equals("payment")) {
          return getPayment();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("invoice")) {
          return getInvoice();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("amountApplied")) {
          agent.target.setAmountApplied((BigDecimal) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("billingAcct")) {
          agent.target.setBillingAcct((Billingaccount) value);
          return;
        }
        if (property.equals("invoiceItem")) {
          agent.target.setInvoiceItem((Invoiceitem) value);
          return;
        }
        if (property.equals("payment")) {
          agent.target.setPayment((Payment) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("invoice")) {
          agent.target.setInvoice((Invoice) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Paymentapplication) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Paymentapplication.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PaymentapplicationProxy((Paymentapplication) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PaymentapplicationProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InventoryitemProxy extends Inventoryitem implements BindableProxy {
      private BindableProxyAgent<Inventoryitem> agent;
      public com_cloderia_helion_client_shared_model_InventoryitemProxy() {
        this(new Inventoryitem());
      }

      public com_cloderia_helion_client_shared_model_InventoryitemProxy(Inventoryitem target) {
        agent = new BindableProxyAgent<Inventoryitem>(this, target);
        agent.propertyTypes.put("container", new PropertyType(Container.class, true, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("prod", new PropertyType(Product.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("serialNum", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("itemTy", new PropertyType(Inventoryitemtype.class, true, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lot", new PropertyType(Lot.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("quantityOnHand", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("facility", new PropertyType(Facility.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("status", new PropertyType(Inventoryitemstatus.class, true, false));
        agent.propertyTypes.put("this", new PropertyType(Inventoryitem.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Inventoryitem unwrap() {
        return agent.target;
      }

      public Inventoryitem deepUnwrap() {
        final Inventoryitem clone = new Inventoryitem();
        if (agent.target.getContainer() instanceof BindableProxy) {
          clone.setContainer((Container) ((BindableProxy) getContainer()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getContainer())) {
          clone.setContainer((Container) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getContainer())).deepUnwrap());
        } else {
          clone.setContainer(agent.target.getContainer());
        }
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getProd() instanceof BindableProxy) {
          clone.setProd((Product) ((BindableProxy) getProd()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProd())) {
          clone.setProd((Product) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProd())).deepUnwrap());
        } else {
          clone.setProd(agent.target.getProd());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setSerialNum(agent.target.getSerialNum());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getItemTy() instanceof BindableProxy) {
          clone.setItemTy((Inventoryitemtype) ((BindableProxy) getItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getItemTy())) {
          clone.setItemTy((Inventoryitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getItemTy())).deepUnwrap());
        } else {
          clone.setItemTy(agent.target.getItemTy());
        }
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getLot() instanceof BindableProxy) {
          clone.setLot((Lot) ((BindableProxy) getLot()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getLot())) {
          clone.setLot((Lot) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getLot())).deepUnwrap());
        } else {
          clone.setLot(agent.target.getLot());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setQuantityOnHand(agent.target.getQuantityOnHand());
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getFacility() instanceof BindableProxy) {
          clone.setFacility((Facility) ((BindableProxy) getFacility()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFacility())) {
          clone.setFacility((Facility) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFacility())).deepUnwrap());
        } else {
          clone.setFacility(agent.target.getFacility());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        if (agent.target.getStatus() instanceof BindableProxy) {
          clone.setStatus((Inventoryitemstatus) ((BindableProxy) getStatus()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getStatus())) {
          clone.setStatus((Inventoryitemstatus) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getStatus())).deepUnwrap());
        } else {
          clone.setStatus(agent.target.getStatus());
        }
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InventoryitemProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InventoryitemProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Container getContainer() {
        return agent.target.getContainer();
      }

      public void setContainer(Container container) {
        if (agent.binders.containsKey("container")) {
          container = (Container) agent.binders.get("container").setModel(container, StateSync.FROM_MODEL, true);
        }
        Container oldValue = agent.target.getContainer();
        agent.target.setContainer(container);
        agent.updateWidgetsAndFireEvent(false, "container", oldValue, container);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Product getProd() {
        return agent.target.getProd();
      }

      public void setProd(Product prod) {
        if (agent.binders.containsKey("prod")) {
          prod = (Product) agent.binders.get("prod").setModel(prod, StateSync.FROM_MODEL, true);
        }
        Product oldValue = agent.target.getProd();
        agent.target.setProd(prod);
        agent.updateWidgetsAndFireEvent(false, "prod", oldValue, prod);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public String getSerialNum() {
        return agent.target.getSerialNum();
      }

      public void setSerialNum(String serialNum) {
        String oldValue = agent.target.getSerialNum();
        agent.target.setSerialNum(serialNum);
        agent.updateWidgetsAndFireEvent(false, "serialNum", oldValue, serialNum);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Inventoryitemtype getItemTy() {
        return agent.target.getItemTy();
      }

      public void setItemTy(Inventoryitemtype itemTy) {
        if (agent.binders.containsKey("itemTy")) {
          itemTy = (Inventoryitemtype) agent.binders.get("itemTy").setModel(itemTy, StateSync.FROM_MODEL, true);
        }
        Inventoryitemtype oldValue = agent.target.getItemTy();
        agent.target.setItemTy(itemTy);
        agent.updateWidgetsAndFireEvent(false, "itemTy", oldValue, itemTy);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Lot getLot() {
        return agent.target.getLot();
      }

      public void setLot(Lot lot) {
        if (agent.binders.containsKey("lot")) {
          lot = (Lot) agent.binders.get("lot").setModel(lot, StateSync.FROM_MODEL, true);
        }
        Lot oldValue = agent.target.getLot();
        agent.target.setLot(lot);
        agent.updateWidgetsAndFireEvent(false, "lot", oldValue, lot);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Integer getQuantityOnHand() {
        return agent.target.getQuantityOnHand();
      }

      public void setQuantityOnHand(Integer quantityOnHand) {
        Integer oldValue = agent.target.getQuantityOnHand();
        agent.target.setQuantityOnHand(quantityOnHand);
        agent.updateWidgetsAndFireEvent(false, "quantityOnHand", oldValue, quantityOnHand);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Facility getFacility() {
        return agent.target.getFacility();
      }

      public void setFacility(Facility facility) {
        if (agent.binders.containsKey("facility")) {
          facility = (Facility) agent.binders.get("facility").setModel(facility, StateSync.FROM_MODEL, true);
        }
        Facility oldValue = agent.target.getFacility();
        agent.target.setFacility(facility);
        agent.updateWidgetsAndFireEvent(false, "facility", oldValue, facility);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Inventoryitemstatus getStatus() {
        return agent.target.getStatus();
      }

      public void setStatus(Inventoryitemstatus status) {
        if (agent.binders.containsKey("status")) {
          status = (Inventoryitemstatus) agent.binders.get("status").setModel(status, StateSync.FROM_MODEL, true);
        }
        Inventoryitemstatus oldValue = agent.target.getStatus();
        agent.target.setStatus(status);
        agent.updateWidgetsAndFireEvent(false, "status", oldValue, status);
      }

      public Object get(String property) {
        if (property.equals("container")) {
          return getContainer();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("prod")) {
          return getProd();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("serialNum")) {
          return getSerialNum();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("itemTy")) {
          return getItemTy();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("lot")) {
          return getLot();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("quantityOnHand")) {
          return getQuantityOnHand();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("facility")) {
          return getFacility();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("status")) {
          return getStatus();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("container")) {
          agent.target.setContainer((Container) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("prod")) {
          agent.target.setProd((Product) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("serialNum")) {
          agent.target.setSerialNum((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("itemTy")) {
          agent.target.setItemTy((Inventoryitemtype) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("lot")) {
          agent.target.setLot((Lot) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("quantityOnHand")) {
          agent.target.setQuantityOnHand((Integer) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("facility")) {
          agent.target.setFacility((Facility) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("status")) {
          agent.target.setStatus((Inventoryitemstatus) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Inventoryitem) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Inventoryitem.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InventoryitemProxy((Inventoryitem) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InventoryitemProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PaymentProxy extends Payment implements BindableProxy {
      private BindableProxyAgent<Payment> agent;
      public com_cloderia_helion_client_shared_model_PaymentProxy() {
        this(new Payment());
      }

      public com_cloderia_helion_client_shared_model_PaymentProxy(Payment target) {
        agent = new BindableProxyAgent<Payment>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("amount", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("finAcct", new PropertyType(Financialaccount.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("methodTy", new PropertyType(Paymentmethodtype.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("paymentTy", new PropertyType(Paymenttype.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Payment.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Payment unwrap() {
        return agent.target;
      }

      public Payment deepUnwrap() {
        final Payment clone = new Payment();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setAmount(agent.target.getAmount());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getFinAcct() instanceof BindableProxy) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) getFinAcct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFinAcct())) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFinAcct())).deepUnwrap());
        } else {
          clone.setFinAcct(agent.target.getFinAcct());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getMethodTy() instanceof BindableProxy) {
          clone.setMethodTy((Paymentmethodtype) ((BindableProxy) getMethodTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getMethodTy())) {
          clone.setMethodTy((Paymentmethodtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getMethodTy())).deepUnwrap());
        } else {
          clone.setMethodTy(agent.target.getMethodTy());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getPaymentTy() instanceof BindableProxy) {
          clone.setPaymentTy((Paymenttype) ((BindableProxy) getPaymentTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPaymentTy())) {
          clone.setPaymentTy((Paymenttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPaymentTy())).deepUnwrap());
        } else {
          clone.setPaymentTy(agent.target.getPaymentTy());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PaymentProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PaymentProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public BigDecimal getAmount() {
        return agent.target.getAmount();
      }

      public void setAmount(BigDecimal amount) {
        BigDecimal oldValue = agent.target.getAmount();
        agent.target.setAmount(amount);
        agent.updateWidgetsAndFireEvent(false, "amount", oldValue, amount);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Financialaccount getFinAcct() {
        return agent.target.getFinAcct();
      }

      public void setFinAcct(Financialaccount finAcct) {
        if (agent.binders.containsKey("finAcct")) {
          finAcct = (Financialaccount) agent.binders.get("finAcct").setModel(finAcct, StateSync.FROM_MODEL, true);
        }
        Financialaccount oldValue = agent.target.getFinAcct();
        agent.target.setFinAcct(finAcct);
        agent.updateWidgetsAndFireEvent(false, "finAcct", oldValue, finAcct);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Paymentmethodtype getMethodTy() {
        return agent.target.getMethodTy();
      }

      public void setMethodTy(Paymentmethodtype methodTy) {
        if (agent.binders.containsKey("methodTy")) {
          methodTy = (Paymentmethodtype) agent.binders.get("methodTy").setModel(methodTy, StateSync.FROM_MODEL, true);
        }
        Paymentmethodtype oldValue = agent.target.getMethodTy();
        agent.target.setMethodTy(methodTy);
        agent.updateWidgetsAndFireEvent(false, "methodTy", oldValue, methodTy);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Paymenttype getPaymentTy() {
        return agent.target.getPaymentTy();
      }

      public void setPaymentTy(Paymenttype paymentTy) {
        if (agent.binders.containsKey("paymentTy")) {
          paymentTy = (Paymenttype) agent.binders.get("paymentTy").setModel(paymentTy, StateSync.FROM_MODEL, true);
        }
        Paymenttype oldValue = agent.target.getPaymentTy();
        agent.target.setPaymentTy(paymentTy);
        agent.updateWidgetsAndFireEvent(false, "paymentTy", oldValue, paymentTy);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("amount")) {
          return getAmount();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("finAcct")) {
          return getFinAcct();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("methodTy")) {
          return getMethodTy();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("paymentTy")) {
          return getPaymentTy();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("amount")) {
          agent.target.setAmount((BigDecimal) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("finAcct")) {
          agent.target.setFinAcct((Financialaccount) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("methodTy")) {
          agent.target.setMethodTy((Paymentmethodtype) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("paymentTy")) {
          agent.target.setPaymentTy((Paymenttype) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Payment) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Payment.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PaymentProxy((Payment) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PaymentProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccountroleProxy extends Financialaccountrole implements BindableProxy {
      private BindableProxyAgent<Financialaccountrole> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccountroleProxy() {
        this(new Financialaccountrole());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccountroleProxy(Financialaccountrole target) {
        agent = new BindableProxyAgent<Financialaccountrole>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("finAcct", new PropertyType(Financialaccount.class, true, false));
        agent.propertyTypes.put("roleTy", new PropertyType(Financialaccountroletype.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccountrole.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccountrole unwrap() {
        return agent.target;
      }

      public Financialaccountrole deepUnwrap() {
        final Financialaccountrole clone = new Financialaccountrole();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getFinAcct() instanceof BindableProxy) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) getFinAcct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFinAcct())) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFinAcct())).deepUnwrap());
        } else {
          clone.setFinAcct(agent.target.getFinAcct());
        }
        if (agent.target.getRoleTy() instanceof BindableProxy) {
          clone.setRoleTy((Financialaccountroletype) ((BindableProxy) getRoleTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getRoleTy())) {
          clone.setRoleTy((Financialaccountroletype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getRoleTy())).deepUnwrap());
        } else {
          clone.setRoleTy(agent.target.getRoleTy());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccountroleProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccountroleProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Financialaccount getFinAcct() {
        return agent.target.getFinAcct();
      }

      public void setFinAcct(Financialaccount finAcct) {
        if (agent.binders.containsKey("finAcct")) {
          finAcct = (Financialaccount) agent.binders.get("finAcct").setModel(finAcct, StateSync.FROM_MODEL, true);
        }
        Financialaccount oldValue = agent.target.getFinAcct();
        agent.target.setFinAcct(finAcct);
        agent.updateWidgetsAndFireEvent(false, "finAcct", oldValue, finAcct);
      }

      public Financialaccountroletype getRoleTy() {
        return agent.target.getRoleTy();
      }

      public void setRoleTy(Financialaccountroletype roleTy) {
        if (agent.binders.containsKey("roleTy")) {
          roleTy = (Financialaccountroletype) agent.binders.get("roleTy").setModel(roleTy, StateSync.FROM_MODEL, true);
        }
        Financialaccountroletype oldValue = agent.target.getRoleTy();
        agent.target.setRoleTy(roleTy);
        agent.updateWidgetsAndFireEvent(false, "roleTy", oldValue, roleTy);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("finAcct")) {
          return getFinAcct();
        }
        if (property.equals("roleTy")) {
          return getRoleTy();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("finAcct")) {
          agent.target.setFinAcct((Financialaccount) value);
          return;
        }
        if (property.equals("roleTy")) {
          agent.target.setRoleTy((Financialaccountroletype) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccountrole) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccountrole.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccountroleProxy((Financialaccountrole) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccountroleProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy extends Generalledgeraccounttype implements BindableProxy {
      private BindableProxyAgent<Generalledgeraccounttype> agent;
      public com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy() {
        this(new Generalledgeraccounttype());
      }

      public com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy(Generalledgeraccounttype target) {
        agent = new BindableProxyAgent<Generalledgeraccounttype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Generalledgeraccounttype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Generalledgeraccounttype unwrap() {
        return agent.target;
      }

      public Generalledgeraccounttype deepUnwrap() {
        final Generalledgeraccounttype clone = new Generalledgeraccounttype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Generalledgeraccounttype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Generalledgeraccounttype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy((Generalledgeraccounttype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_GeneralledgeraccounttypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ContainertypeProxy extends Containertype implements BindableProxy {
      private BindableProxyAgent<Containertype> agent;
      public com_cloderia_helion_client_shared_model_ContainertypeProxy() {
        this(new Containertype());
      }

      public com_cloderia_helion_client_shared_model_ContainertypeProxy(Containertype target) {
        agent = new BindableProxyAgent<Containertype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Containertype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Containertype unwrap() {
        return agent.target;
      }

      public Containertype deepUnwrap() {
        final Containertype clone = new Containertype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ContainertypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ContainertypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Containertype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Containertype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ContainertypeProxy((Containertype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ContainertypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductProxy extends Product implements BindableProxy {
      private BindableProxyAgent<Product> agent;
      public com_cloderia_helion_client_shared_model_ProductProxy() {
        this(new Product());
      }

      public com_cloderia_helion_client_shared_model_ProductProxy(Product target) {
        agent = new BindableProxyAgent<Product>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("introductionDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("prodTy", new PropertyType(Producttype.class, true, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("salesDiscDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("manufacturer", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("uom", new PropertyType(Uom.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("supportDiscDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("remarks", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Product.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Product unwrap() {
        return agent.target;
      }

      public Product deepUnwrap() {
        final Product clone = new Product();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setIntroductionDt(agent.target.getIntroductionDt());
        clone.setRecSt(agent.target.getRecSt());
        if (agent.target.getProdTy() instanceof BindableProxy) {
          clone.setProdTy((Producttype) ((BindableProxy) getProdTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProdTy())) {
          clone.setProdTy((Producttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProdTy())).deepUnwrap());
        } else {
          clone.setProdTy(agent.target.getProdTy());
        }
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setSalesDiscDt(agent.target.getSalesDiscDt());
        if (agent.target.getManufacturer() instanceof BindableProxy) {
          clone.setManufacturer((Party) ((BindableProxy) getManufacturer()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getManufacturer())) {
          clone.setManufacturer((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getManufacturer())).deepUnwrap());
        } else {
          clone.setManufacturer(agent.target.getManufacturer());
        }
        if (agent.target.getUom() instanceof BindableProxy) {
          clone.setUom((Uom) ((BindableProxy) getUom()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUom())) {
          clone.setUom((Uom) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUom())).deepUnwrap());
        } else {
          clone.setUom(agent.target.getUom());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setSupportDiscDt(agent.target.getSupportDiscDt());
        clone.setRemarks(agent.target.getRemarks());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Date getIntroductionDt() {
        return agent.target.getIntroductionDt();
      }

      public void setIntroductionDt(Date introductionDt) {
        Date oldValue = agent.target.getIntroductionDt();
        agent.target.setIntroductionDt(introductionDt);
        agent.updateWidgetsAndFireEvent(false, "introductionDt", oldValue, introductionDt);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Producttype getProdTy() {
        return agent.target.getProdTy();
      }

      public void setProdTy(Producttype prodTy) {
        if (agent.binders.containsKey("prodTy")) {
          prodTy = (Producttype) agent.binders.get("prodTy").setModel(prodTy, StateSync.FROM_MODEL, true);
        }
        Producttype oldValue = agent.target.getProdTy();
        agent.target.setProdTy(prodTy);
        agent.updateWidgetsAndFireEvent(false, "prodTy", oldValue, prodTy);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getSalesDiscDt() {
        return agent.target.getSalesDiscDt();
      }

      public void setSalesDiscDt(Date salesDiscDt) {
        Date oldValue = agent.target.getSalesDiscDt();
        agent.target.setSalesDiscDt(salesDiscDt);
        agent.updateWidgetsAndFireEvent(false, "salesDiscDt", oldValue, salesDiscDt);
      }

      public Party getManufacturer() {
        return agent.target.getManufacturer();
      }

      public void setManufacturer(Party manufacturer) {
        if (agent.binders.containsKey("manufacturer")) {
          manufacturer = (Party) agent.binders.get("manufacturer").setModel(manufacturer, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getManufacturer();
        agent.target.setManufacturer(manufacturer);
        agent.updateWidgetsAndFireEvent(false, "manufacturer", oldValue, manufacturer);
      }

      public Uom getUom() {
        return agent.target.getUom();
      }

      public void setUom(Uom uom) {
        if (agent.binders.containsKey("uom")) {
          uom = (Uom) agent.binders.get("uom").setModel(uom, StateSync.FROM_MODEL, true);
        }
        Uom oldValue = agent.target.getUom();
        agent.target.setUom(uom);
        agent.updateWidgetsAndFireEvent(false, "uom", oldValue, uom);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getSupportDiscDt() {
        return agent.target.getSupportDiscDt();
      }

      public void setSupportDiscDt(Date supportDiscDt) {
        Date oldValue = agent.target.getSupportDiscDt();
        agent.target.setSupportDiscDt(supportDiscDt);
        agent.updateWidgetsAndFireEvent(false, "supportDiscDt", oldValue, supportDiscDt);
      }

      public Integer getRemarks() {
        return agent.target.getRemarks();
      }

      public void setRemarks(Integer remarks) {
        Integer oldValue = agent.target.getRemarks();
        agent.target.setRemarks(remarks);
        agent.updateWidgetsAndFireEvent(false, "remarks", oldValue, remarks);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("introductionDt")) {
          return getIntroductionDt();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("prodTy")) {
          return getProdTy();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("salesDiscDt")) {
          return getSalesDiscDt();
        }
        if (property.equals("manufacturer")) {
          return getManufacturer();
        }
        if (property.equals("uom")) {
          return getUom();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("supportDiscDt")) {
          return getSupportDiscDt();
        }
        if (property.equals("remarks")) {
          return getRemarks();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("introductionDt")) {
          agent.target.setIntroductionDt((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("prodTy")) {
          agent.target.setProdTy((Producttype) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("salesDiscDt")) {
          agent.target.setSalesDiscDt((Date) value);
          return;
        }
        if (property.equals("manufacturer")) {
          agent.target.setManufacturer((Party) value);
          return;
        }
        if (property.equals("uom")) {
          agent.target.setUom((Uom) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("supportDiscDt")) {
          agent.target.setSupportDiscDt((Date) value);
          return;
        }
        if (property.equals("remarks")) {
          agent.target.setRemarks((Integer) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Product) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Product.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductProxy((Product) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FixedassetProxy extends Fixedasset implements BindableProxy {
      private BindableProxyAgent<Fixedasset> agent;
      public com_cloderia_helion_client_shared_model_FixedassetProxy() {
        this(new Fixedasset());
      }

      public com_cloderia_helion_client_shared_model_FixedassetProxy(Fixedasset target) {
        agent = new BindableProxyAgent<Fixedasset>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("productionCapacity", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fixedAssetTy", new PropertyType(Fixedassettype.class, true, false));
        agent.propertyTypes.put("uom", new PropertyType(Uom.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("aquiredDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("nextServicedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastServicedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Fixedasset.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Fixedasset unwrap() {
        return agent.target;
      }

      public Fixedasset deepUnwrap() {
        final Fixedasset clone = new Fixedasset();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setProductionCapacity(agent.target.getProductionCapacity());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getFixedAssetTy() instanceof BindableProxy) {
          clone.setFixedAssetTy((Fixedassettype) ((BindableProxy) getFixedAssetTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFixedAssetTy())) {
          clone.setFixedAssetTy((Fixedassettype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFixedAssetTy())).deepUnwrap());
        } else {
          clone.setFixedAssetTy(agent.target.getFixedAssetTy());
        }
        if (agent.target.getUom() instanceof BindableProxy) {
          clone.setUom((Uom) ((BindableProxy) getUom()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUom())) {
          clone.setUom((Uom) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUom())).deepUnwrap());
        } else {
          clone.setUom(agent.target.getUom());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        clone.setAquiredDt(agent.target.getAquiredDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setNextServicedDt(agent.target.getNextServicedDt());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastServicedDt(agent.target.getLastServicedDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FixedassetProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FixedassetProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Integer getProductionCapacity() {
        return agent.target.getProductionCapacity();
      }

      public void setProductionCapacity(Integer productionCapacity) {
        Integer oldValue = agent.target.getProductionCapacity();
        agent.target.setProductionCapacity(productionCapacity);
        agent.updateWidgetsAndFireEvent(false, "productionCapacity", oldValue, productionCapacity);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Fixedassettype getFixedAssetTy() {
        return agent.target.getFixedAssetTy();
      }

      public void setFixedAssetTy(Fixedassettype fixedAssetTy) {
        if (agent.binders.containsKey("fixedAssetTy")) {
          fixedAssetTy = (Fixedassettype) agent.binders.get("fixedAssetTy").setModel(fixedAssetTy, StateSync.FROM_MODEL, true);
        }
        Fixedassettype oldValue = agent.target.getFixedAssetTy();
        agent.target.setFixedAssetTy(fixedAssetTy);
        agent.updateWidgetsAndFireEvent(false, "fixedAssetTy", oldValue, fixedAssetTy);
      }

      public Uom getUom() {
        return agent.target.getUom();
      }

      public void setUom(Uom uom) {
        if (agent.binders.containsKey("uom")) {
          uom = (Uom) agent.binders.get("uom").setModel(uom, StateSync.FROM_MODEL, true);
        }
        Uom oldValue = agent.target.getUom();
        agent.target.setUom(uom);
        agent.updateWidgetsAndFireEvent(false, "uom", oldValue, uom);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Date getAquiredDt() {
        return agent.target.getAquiredDt();
      }

      public void setAquiredDt(Date aquiredDt) {
        Date oldValue = agent.target.getAquiredDt();
        agent.target.setAquiredDt(aquiredDt);
        agent.updateWidgetsAndFireEvent(false, "aquiredDt", oldValue, aquiredDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Date getNextServicedDt() {
        return agent.target.getNextServicedDt();
      }

      public void setNextServicedDt(Date nextServicedDt) {
        Date oldValue = agent.target.getNextServicedDt();
        agent.target.setNextServicedDt(nextServicedDt);
        agent.updateWidgetsAndFireEvent(false, "nextServicedDt", oldValue, nextServicedDt);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastServicedDt() {
        return agent.target.getLastServicedDt();
      }

      public void setLastServicedDt(Date lastServicedDt) {
        Date oldValue = agent.target.getLastServicedDt();
        agent.target.setLastServicedDt(lastServicedDt);
        agent.updateWidgetsAndFireEvent(false, "lastServicedDt", oldValue, lastServicedDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("productionCapacity")) {
          return getProductionCapacity();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fixedAssetTy")) {
          return getFixedAssetTy();
        }
        if (property.equals("uom")) {
          return getUom();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("aquiredDt")) {
          return getAquiredDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("nextServicedDt")) {
          return getNextServicedDt();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastServicedDt")) {
          return getLastServicedDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("productionCapacity")) {
          agent.target.setProductionCapacity((Integer) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fixedAssetTy")) {
          agent.target.setFixedAssetTy((Fixedassettype) value);
          return;
        }
        if (property.equals("uom")) {
          agent.target.setUom((Uom) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("aquiredDt")) {
          agent.target.setAquiredDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("nextServicedDt")) {
          agent.target.setNextServicedDt((Date) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastServicedDt")) {
          agent.target.setLastServicedDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Fixedasset) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Fixedasset.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FixedassetProxy((Fixedasset) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FixedassetProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgettypeProxy extends Budgettype implements BindableProxy {
      private BindableProxyAgent<Budgettype> agent;
      public com_cloderia_helion_client_shared_model_BudgettypeProxy() {
        this(new Budgettype());
      }

      public com_cloderia_helion_client_shared_model_BudgettypeProxy(Budgettype target) {
        agent = new BindableProxyAgent<Budgettype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Budgettype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budgettype unwrap() {
        return agent.target;
      }

      public Budgettype deepUnwrap() {
        final Budgettype clone = new Budgettype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgettypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgettypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budgettype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budgettype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgettypeProxy((Budgettype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgettypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoiceitemProxy extends Invoiceitem implements BindableProxy {
      private BindableProxyAgent<Invoiceitem> agent;
      public com_cloderia_helion_client_shared_model_InvoiceitemProxy() {
        this(new Invoiceitem());
      }

      public com_cloderia_helion_client_shared_model_InvoiceitemProxy(Invoiceitem target) {
        agent = new BindableProxyAgent<Invoiceitem>(this, target);
        agent.propertyTypes.put("inventoryItem", new PropertyType(Inventoryitem.class, true, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("itemTy", new PropertyType(Invoiceitemtype.class, true, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("itemDescription", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("soldWithItem", new PropertyType(Invoiceitem.class, true, false));
        agent.propertyTypes.put("unitPrice", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("amount", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("prod", new PropertyType(Product.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("quantity", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("adjByItem", new PropertyType(Invoiceitem.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("invoice", new PropertyType(Invoice.class, true, false));
        agent.propertyTypes.put("taxableFg", new PropertyType(Boolean.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("prodFeat", new PropertyType(Productfeature.class, true, false));
        agent.propertyTypes.put("this", new PropertyType(Invoiceitem.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoiceitem unwrap() {
        return agent.target;
      }

      public Invoiceitem deepUnwrap() {
        final Invoiceitem clone = new Invoiceitem();
        if (agent.target.getInventoryItem() instanceof BindableProxy) {
          clone.setInventoryItem((Inventoryitem) ((BindableProxy) getInventoryItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInventoryItem())) {
          clone.setInventoryItem((Inventoryitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInventoryItem())).deepUnwrap());
        } else {
          clone.setInventoryItem(agent.target.getInventoryItem());
        }
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setRowTs(agent.target.getRowTs());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getItemTy() instanceof BindableProxy) {
          clone.setItemTy((Invoiceitemtype) ((BindableProxy) getItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getItemTy())) {
          clone.setItemTy((Invoiceitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getItemTy())).deepUnwrap());
        } else {
          clone.setItemTy(agent.target.getItemTy());
        }
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setItemDescription(agent.target.getItemDescription());
        if (agent.target.getSoldWithItem() instanceof BindableProxy) {
          clone.setSoldWithItem((Invoiceitem) ((BindableProxy) getSoldWithItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getSoldWithItem())) {
          clone.setSoldWithItem((Invoiceitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getSoldWithItem())).deepUnwrap());
        } else {
          clone.setSoldWithItem(agent.target.getSoldWithItem());
        }
        clone.setUnitPrice(agent.target.getUnitPrice());
        clone.setAmount(agent.target.getAmount());
        if (agent.target.getProd() instanceof BindableProxy) {
          clone.setProd((Product) ((BindableProxy) getProd()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProd())) {
          clone.setProd((Product) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProd())).deepUnwrap());
        } else {
          clone.setProd(agent.target.getProd());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setQuantity(agent.target.getQuantity());
        clone.setRecSt(agent.target.getRecSt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getAdjByItem() instanceof BindableProxy) {
          clone.setAdjByItem((Invoiceitem) ((BindableProxy) getAdjByItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAdjByItem())) {
          clone.setAdjByItem((Invoiceitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAdjByItem())).deepUnwrap());
        } else {
          clone.setAdjByItem(agent.target.getAdjByItem());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        if (agent.target.getInvoice() instanceof BindableProxy) {
          clone.setInvoice((Invoice) ((BindableProxy) getInvoice()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoice())) {
          clone.setInvoice((Invoice) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoice())).deepUnwrap());
        } else {
          clone.setInvoice(agent.target.getInvoice());
        }
        clone.setTaxableFg(agent.target.getTaxableFg());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        if (agent.target.getProdFeat() instanceof BindableProxy) {
          clone.setProdFeat((Productfeature) ((BindableProxy) getProdFeat()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProdFeat())) {
          clone.setProdFeat((Productfeature) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProdFeat())).deepUnwrap());
        } else {
          clone.setProdFeat(agent.target.getProdFeat());
        }
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoiceitemProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoiceitemProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Inventoryitem getInventoryItem() {
        return agent.target.getInventoryItem();
      }

      public void setInventoryItem(Inventoryitem inventoryItem) {
        if (agent.binders.containsKey("inventoryItem")) {
          inventoryItem = (Inventoryitem) agent.binders.get("inventoryItem").setModel(inventoryItem, StateSync.FROM_MODEL, true);
        }
        Inventoryitem oldValue = agent.target.getInventoryItem();
        agent.target.setInventoryItem(inventoryItem);
        agent.updateWidgetsAndFireEvent(false, "inventoryItem", oldValue, inventoryItem);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Invoiceitemtype getItemTy() {
        return agent.target.getItemTy();
      }

      public void setItemTy(Invoiceitemtype itemTy) {
        if (agent.binders.containsKey("itemTy")) {
          itemTy = (Invoiceitemtype) agent.binders.get("itemTy").setModel(itemTy, StateSync.FROM_MODEL, true);
        }
        Invoiceitemtype oldValue = agent.target.getItemTy();
        agent.target.setItemTy(itemTy);
        agent.updateWidgetsAndFireEvent(false, "itemTy", oldValue, itemTy);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getItemDescription() {
        return agent.target.getItemDescription();
      }

      public void setItemDescription(String itemDescription) {
        String oldValue = agent.target.getItemDescription();
        agent.target.setItemDescription(itemDescription);
        agent.updateWidgetsAndFireEvent(false, "itemDescription", oldValue, itemDescription);
      }

      public Invoiceitem getSoldWithItem() {
        return agent.target.getSoldWithItem();
      }

      public void setSoldWithItem(Invoiceitem soldWithItem) {
        if (agent.binders.containsKey("soldWithItem")) {
          soldWithItem = (Invoiceitem) agent.binders.get("soldWithItem").setModel(soldWithItem, StateSync.FROM_MODEL, true);
        }
        Invoiceitem oldValue = agent.target.getSoldWithItem();
        agent.target.setSoldWithItem(soldWithItem);
        agent.updateWidgetsAndFireEvent(false, "soldWithItem", oldValue, soldWithItem);
      }

      public BigDecimal getUnitPrice() {
        return agent.target.getUnitPrice();
      }

      public void setUnitPrice(BigDecimal unitPrice) {
        BigDecimal oldValue = agent.target.getUnitPrice();
        agent.target.setUnitPrice(unitPrice);
        agent.updateWidgetsAndFireEvent(false, "unitPrice", oldValue, unitPrice);
      }

      public BigDecimal getAmount() {
        return agent.target.getAmount();
      }

      public void setAmount(BigDecimal amount) {
        BigDecimal oldValue = agent.target.getAmount();
        agent.target.setAmount(amount);
        agent.updateWidgetsAndFireEvent(false, "amount", oldValue, amount);
      }

      public Product getProd() {
        return agent.target.getProd();
      }

      public void setProd(Product prod) {
        if (agent.binders.containsKey("prod")) {
          prod = (Product) agent.binders.get("prod").setModel(prod, StateSync.FROM_MODEL, true);
        }
        Product oldValue = agent.target.getProd();
        agent.target.setProd(prod);
        agent.updateWidgetsAndFireEvent(false, "prod", oldValue, prod);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Integer getQuantity() {
        return agent.target.getQuantity();
      }

      public void setQuantity(Integer quantity) {
        Integer oldValue = agent.target.getQuantity();
        agent.target.setQuantity(quantity);
        agent.updateWidgetsAndFireEvent(false, "quantity", oldValue, quantity);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Invoiceitem getAdjByItem() {
        return agent.target.getAdjByItem();
      }

      public void setAdjByItem(Invoiceitem adjByItem) {
        if (agent.binders.containsKey("adjByItem")) {
          adjByItem = (Invoiceitem) agent.binders.get("adjByItem").setModel(adjByItem, StateSync.FROM_MODEL, true);
        }
        Invoiceitem oldValue = agent.target.getAdjByItem();
        agent.target.setAdjByItem(adjByItem);
        agent.updateWidgetsAndFireEvent(false, "adjByItem", oldValue, adjByItem);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Invoice getInvoice() {
        return agent.target.getInvoice();
      }

      public void setInvoice(Invoice invoice) {
        if (agent.binders.containsKey("invoice")) {
          invoice = (Invoice) agent.binders.get("invoice").setModel(invoice, StateSync.FROM_MODEL, true);
        }
        Invoice oldValue = agent.target.getInvoice();
        agent.target.setInvoice(invoice);
        agent.updateWidgetsAndFireEvent(false, "invoice", oldValue, invoice);
      }

      public Boolean getTaxableFg() {
        return agent.target.getTaxableFg();
      }

      public void setTaxableFg(Boolean taxableFg) {
        Boolean oldValue = agent.target.getTaxableFg();
        agent.target.setTaxableFg(taxableFg);
        agent.updateWidgetsAndFireEvent(false, "taxableFg", oldValue, taxableFg);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Productfeature getProdFeat() {
        return agent.target.getProdFeat();
      }

      public void setProdFeat(Productfeature prodFeat) {
        if (agent.binders.containsKey("prodFeat")) {
          prodFeat = (Productfeature) agent.binders.get("prodFeat").setModel(prodFeat, StateSync.FROM_MODEL, true);
        }
        Productfeature oldValue = agent.target.getProdFeat();
        agent.target.setProdFeat(prodFeat);
        agent.updateWidgetsAndFireEvent(false, "prodFeat", oldValue, prodFeat);
      }

      public Object get(String property) {
        if (property.equals("inventoryItem")) {
          return getInventoryItem();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("itemTy")) {
          return getItemTy();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("itemDescription")) {
          return getItemDescription();
        }
        if (property.equals("soldWithItem")) {
          return getSoldWithItem();
        }
        if (property.equals("unitPrice")) {
          return getUnitPrice();
        }
        if (property.equals("amount")) {
          return getAmount();
        }
        if (property.equals("prod")) {
          return getProd();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("quantity")) {
          return getQuantity();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("adjByItem")) {
          return getAdjByItem();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("invoice")) {
          return getInvoice();
        }
        if (property.equals("taxableFg")) {
          return getTaxableFg();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("prodFeat")) {
          return getProdFeat();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("inventoryItem")) {
          agent.target.setInventoryItem((Inventoryitem) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("itemTy")) {
          agent.target.setItemTy((Invoiceitemtype) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("itemDescription")) {
          agent.target.setItemDescription((String) value);
          return;
        }
        if (property.equals("soldWithItem")) {
          agent.target.setSoldWithItem((Invoiceitem) value);
          return;
        }
        if (property.equals("unitPrice")) {
          agent.target.setUnitPrice((BigDecimal) value);
          return;
        }
        if (property.equals("amount")) {
          agent.target.setAmount((BigDecimal) value);
          return;
        }
        if (property.equals("prod")) {
          agent.target.setProd((Product) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("quantity")) {
          agent.target.setQuantity((Integer) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("adjByItem")) {
          agent.target.setAdjByItem((Invoiceitem) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("invoice")) {
          agent.target.setInvoice((Invoice) value);
          return;
        }
        if (property.equals("taxableFg")) {
          agent.target.setTaxableFg((Boolean) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("prodFeat")) {
          agent.target.setProdFeat((Productfeature) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoiceitem) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoiceitem.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoiceitemProxy((Invoiceitem) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoiceitemProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy extends Financialaccounttype implements BindableProxy {
      private BindableProxyAgent<Financialaccounttype> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy() {
        this(new Financialaccounttype());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy(Financialaccounttype target) {
        agent = new BindableProxyAgent<Financialaccounttype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccounttype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccounttype unwrap() {
        return agent.target;
      }

      public Financialaccounttype deepUnwrap() {
        final Financialaccounttype clone = new Financialaccounttype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccounttype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccounttype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy((Financialaccounttype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_LotProxy extends Lot implements BindableProxy {
      private BindableProxyAgent<Lot> agent;
      public com_cloderia_helion_client_shared_model_LotProxy() {
        this(new Lot());
      }

      public com_cloderia_helion_client_shared_model_LotProxy(Lot target) {
        agent = new BindableProxyAgent<Lot>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("quantity", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("expiryDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Lot.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Lot unwrap() {
        return agent.target;
      }

      public Lot deepUnwrap() {
        final Lot clone = new Lot();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setQuantity(agent.target.getQuantity());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setExpiryDt(agent.target.getExpiryDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_LotProxy) {
          obj = ((com_cloderia_helion_client_shared_model_LotProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Integer getQuantity() {
        return agent.target.getQuantity();
      }

      public void setQuantity(Integer quantity) {
        Integer oldValue = agent.target.getQuantity();
        agent.target.setQuantity(quantity);
        agent.updateWidgetsAndFireEvent(false, "quantity", oldValue, quantity);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getExpiryDt() {
        return agent.target.getExpiryDt();
      }

      public void setExpiryDt(Date expiryDt) {
        Date oldValue = agent.target.getExpiryDt();
        agent.target.setExpiryDt(expiryDt);
        agent.updateWidgetsAndFireEvent(false, "expiryDt", oldValue, expiryDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("quantity")) {
          return getQuantity();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("expiryDt")) {
          return getExpiryDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("quantity")) {
          agent.target.setQuantity((Integer) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("expiryDt")) {
          agent.target.setExpiryDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Lot) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Lot.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_LotProxy((Lot) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_LotProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy extends Accountingtransactiondetail implements BindableProxy {
      private BindableProxyAgent<Accountingtransactiondetail> agent;
      public com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy() {
        this(new Accountingtransactiondetail());
      }

      public com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy(Accountingtransactiondetail target) {
        agent = new BindableProxyAgent<Accountingtransactiondetail>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("associatedDetail", new PropertyType(Accountingtransactiondetail.class, true, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("debitCreditFg", new PropertyType(Boolean.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("transaction", new PropertyType(Accountingtransaction.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Accountingtransactiondetail.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Accountingtransactiondetail unwrap() {
        return agent.target;
      }

      public Accountingtransactiondetail deepUnwrap() {
        final Accountingtransactiondetail clone = new Accountingtransactiondetail();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        if (agent.target.getAssociatedDetail() instanceof BindableProxy) {
          clone.setAssociatedDetail((Accountingtransactiondetail) ((BindableProxy) getAssociatedDetail()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAssociatedDetail())) {
          clone.setAssociatedDetail((Accountingtransactiondetail) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAssociatedDetail())).deepUnwrap());
        } else {
          clone.setAssociatedDetail(agent.target.getAssociatedDetail());
        }
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setDebitCreditFg(agent.target.getDebitCreditFg());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getTransaction() instanceof BindableProxy) {
          clone.setTransaction((Accountingtransaction) ((BindableProxy) getTransaction()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTransaction())) {
          clone.setTransaction((Accountingtransaction) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTransaction())).deepUnwrap());
        } else {
          clone.setTransaction(agent.target.getTransaction());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Accountingtransactiondetail getAssociatedDetail() {
        return agent.target.getAssociatedDetail();
      }

      public void setAssociatedDetail(Accountingtransactiondetail associatedDetail) {
        if (agent.binders.containsKey("associatedDetail")) {
          associatedDetail = (Accountingtransactiondetail) agent.binders.get("associatedDetail").setModel(associatedDetail, StateSync.FROM_MODEL, true);
        }
        Accountingtransactiondetail oldValue = agent.target.getAssociatedDetail();
        agent.target.setAssociatedDetail(associatedDetail);
        agent.updateWidgetsAndFireEvent(false, "associatedDetail", oldValue, associatedDetail);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Boolean getDebitCreditFg() {
        return agent.target.getDebitCreditFg();
      }

      public void setDebitCreditFg(Boolean debitCreditFg) {
        Boolean oldValue = agent.target.getDebitCreditFg();
        agent.target.setDebitCreditFg(debitCreditFg);
        agent.updateWidgetsAndFireEvent(false, "debitCreditFg", oldValue, debitCreditFg);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Accountingtransaction getTransaction() {
        return agent.target.getTransaction();
      }

      public void setTransaction(Accountingtransaction transaction) {
        if (agent.binders.containsKey("transaction")) {
          transaction = (Accountingtransaction) agent.binders.get("transaction").setModel(transaction, StateSync.FROM_MODEL, true);
        }
        Accountingtransaction oldValue = agent.target.getTransaction();
        agent.target.setTransaction(transaction);
        agent.updateWidgetsAndFireEvent(false, "transaction", oldValue, transaction);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("associatedDetail")) {
          return getAssociatedDetail();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("debitCreditFg")) {
          return getDebitCreditFg();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("transaction")) {
          return getTransaction();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("associatedDetail")) {
          agent.target.setAssociatedDetail((Accountingtransactiondetail) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("debitCreditFg")) {
          agent.target.setDebitCreditFg((Boolean) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("transaction")) {
          agent.target.setTransaction((Accountingtransaction) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Accountingtransactiondetail) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Accountingtransactiondetail.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy((Accountingtransactiondetail) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AccountingtransactiondetailProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccountProxy extends Financialaccount implements BindableProxy {
      private BindableProxyAgent<Financialaccount> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccountProxy() {
        this(new Financialaccount());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccountProxy(Financialaccount target) {
        agent = new BindableProxyAgent<Financialaccount>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("finAcctTy", new PropertyType(Financialaccounttype.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccount.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccount unwrap() {
        return agent.target;
      }

      public Financialaccount deepUnwrap() {
        final Financialaccount clone = new Financialaccount();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getFinAcctTy() instanceof BindableProxy) {
          clone.setFinAcctTy((Financialaccounttype) ((BindableProxy) getFinAcctTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFinAcctTy())) {
          clone.setFinAcctTy((Financialaccounttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFinAcctTy())).deepUnwrap());
        } else {
          clone.setFinAcctTy(agent.target.getFinAcctTy());
        }
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccountProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccountProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Financialaccounttype getFinAcctTy() {
        return agent.target.getFinAcctTy();
      }

      public void setFinAcctTy(Financialaccounttype finAcctTy) {
        if (agent.binders.containsKey("finAcctTy")) {
          finAcctTy = (Financialaccounttype) agent.binders.get("finAcctTy").setModel(finAcctTy, StateSync.FROM_MODEL, true);
        }
        Financialaccounttype oldValue = agent.target.getFinAcctTy();
        agent.target.setFinAcctTy(finAcctTy);
        agent.updateWidgetsAndFireEvent(false, "finAcctTy", oldValue, finAcctTy);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("finAcctTy")) {
          return getFinAcctTy();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("finAcctTy")) {
          agent.target.setFinAcctTy((Financialaccounttype) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccount) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccount.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccountProxy((Financialaccount) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccountProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InventoryitemtypeProxy extends Inventoryitemtype implements BindableProxy {
      private BindableProxyAgent<Inventoryitemtype> agent;
      public com_cloderia_helion_client_shared_model_InventoryitemtypeProxy() {
        this(new Inventoryitemtype());
      }

      public com_cloderia_helion_client_shared_model_InventoryitemtypeProxy(Inventoryitemtype target) {
        agent = new BindableProxyAgent<Inventoryitemtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Inventoryitemtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Inventoryitemtype unwrap() {
        return agent.target;
      }

      public Inventoryitemtype deepUnwrap() {
        final Inventoryitemtype clone = new Inventoryitemtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InventoryitemtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InventoryitemtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Inventoryitemtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Inventoryitemtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InventoryitemtypeProxy((Inventoryitemtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InventoryitemtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementtypeProxy extends Agreementtype implements BindableProxy {
      private BindableProxyAgent<Agreementtype> agent;
      public com_cloderia_helion_client_shared_model_AgreementtypeProxy() {
        this(new Agreementtype());
      }

      public com_cloderia_helion_client_shared_model_AgreementtypeProxy(Agreementtype target) {
        agent = new BindableProxyAgent<Agreementtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementtype unwrap() {
        return agent.target;
      }

      public Agreementtype deepUnwrap() {
        final Agreementtype clone = new Agreementtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementtypeProxy((Agreementtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy extends Financialaccounttransaction implements BindableProxy {
      private BindableProxyAgent<Financialaccounttransaction> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy() {
        this(new Financialaccounttransaction());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy(Financialaccounttransaction target) {
        agent = new BindableProxyAgent<Financialaccounttransaction>(this, target);
        agent.propertyTypes.put("entryDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("finAcct", new PropertyType(Financialaccount.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("finTxnTy", new PropertyType(Financialaccounttransactiontype.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("transactionDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccounttransaction.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccounttransaction unwrap() {
        return agent.target;
      }

      public Financialaccounttransaction deepUnwrap() {
        final Financialaccounttransaction clone = new Financialaccounttransaction();
        clone.setEntryDt(agent.target.getEntryDt());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getFinAcct() instanceof BindableProxy) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) getFinAcct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFinAcct())) {
          clone.setFinAcct((Financialaccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFinAcct())).deepUnwrap());
        } else {
          clone.setFinAcct(agent.target.getFinAcct());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getFinTxnTy() instanceof BindableProxy) {
          clone.setFinTxnTy((Financialaccounttransactiontype) ((BindableProxy) getFinTxnTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFinTxnTy())) {
          clone.setFinTxnTy((Financialaccounttransactiontype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFinTxnTy())).deepUnwrap());
        } else {
          clone.setFinTxnTy(agent.target.getFinTxnTy());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setTransactionDt(agent.target.getTransactionDt());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Date getEntryDt() {
        return agent.target.getEntryDt();
      }

      public void setEntryDt(Date entryDt) {
        Date oldValue = agent.target.getEntryDt();
        agent.target.setEntryDt(entryDt);
        agent.updateWidgetsAndFireEvent(false, "entryDt", oldValue, entryDt);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Financialaccount getFinAcct() {
        return agent.target.getFinAcct();
      }

      public void setFinAcct(Financialaccount finAcct) {
        if (agent.binders.containsKey("finAcct")) {
          finAcct = (Financialaccount) agent.binders.get("finAcct").setModel(finAcct, StateSync.FROM_MODEL, true);
        }
        Financialaccount oldValue = agent.target.getFinAcct();
        agent.target.setFinAcct(finAcct);
        agent.updateWidgetsAndFireEvent(false, "finAcct", oldValue, finAcct);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Financialaccounttransactiontype getFinTxnTy() {
        return agent.target.getFinTxnTy();
      }

      public void setFinTxnTy(Financialaccounttransactiontype finTxnTy) {
        if (agent.binders.containsKey("finTxnTy")) {
          finTxnTy = (Financialaccounttransactiontype) agent.binders.get("finTxnTy").setModel(finTxnTy, StateSync.FROM_MODEL, true);
        }
        Financialaccounttransactiontype oldValue = agent.target.getFinTxnTy();
        agent.target.setFinTxnTy(finTxnTy);
        agent.updateWidgetsAndFireEvent(false, "finTxnTy", oldValue, finTxnTy);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Date getTransactionDt() {
        return agent.target.getTransactionDt();
      }

      public void setTransactionDt(Date transactionDt) {
        Date oldValue = agent.target.getTransactionDt();
        agent.target.setTransactionDt(transactionDt);
        agent.updateWidgetsAndFireEvent(false, "transactionDt", oldValue, transactionDt);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("entryDt")) {
          return getEntryDt();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("finAcct")) {
          return getFinAcct();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("finTxnTy")) {
          return getFinTxnTy();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("transactionDt")) {
          return getTransactionDt();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("entryDt")) {
          agent.target.setEntryDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("finAcct")) {
          agent.target.setFinAcct((Financialaccount) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("finTxnTy")) {
          agent.target.setFinTxnTy((Financialaccounttransactiontype) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("transactionDt")) {
          agent.target.setTransactionDt((Date) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccounttransaction) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccounttransaction.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy((Financialaccounttransaction) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttransactionProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PeriodtypeProxy extends Periodtype implements BindableProxy {
      private BindableProxyAgent<Periodtype> agent;
      public com_cloderia_helion_client_shared_model_PeriodtypeProxy() {
        this(new Periodtype());
      }

      public com_cloderia_helion_client_shared_model_PeriodtypeProxy(Periodtype target) {
        agent = new BindableProxyAgent<Periodtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Periodtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Periodtype unwrap() {
        return agent.target;
      }

      public Periodtype deepUnwrap() {
        final Periodtype clone = new Periodtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PeriodtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PeriodtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Periodtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Periodtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PeriodtypeProxy((Periodtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PeriodtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProducttypeProxy extends Producttype implements BindableProxy {
      private BindableProxyAgent<Producttype> agent;
      public com_cloderia_helion_client_shared_model_ProducttypeProxy() {
        this(new Producttype());
      }

      public com_cloderia_helion_client_shared_model_ProducttypeProxy(Producttype target) {
        agent = new BindableProxyAgent<Producttype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Producttype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Producttype unwrap() {
        return agent.target;
      }

      public Producttype deepUnwrap() {
        final Producttype clone = new Producttype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProducttypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProducttypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Producttype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Producttype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProducttypeProxy((Producttype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProducttypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_DepreciationmethodProxy extends Depreciationmethod implements BindableProxy {
      private BindableProxyAgent<Depreciationmethod> agent;
      public com_cloderia_helion_client_shared_model_DepreciationmethodProxy() {
        this(new Depreciationmethod());
      }

      public com_cloderia_helion_client_shared_model_DepreciationmethodProxy(Depreciationmethod target) {
        agent = new BindableProxyAgent<Depreciationmethod>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("formula", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Depreciationmethod.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Depreciationmethod unwrap() {
        return agent.target;
      }

      public Depreciationmethod deepUnwrap() {
        final Depreciationmethod clone = new Depreciationmethod();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setFormula(agent.target.getFormula());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_DepreciationmethodProxy) {
          obj = ((com_cloderia_helion_client_shared_model_DepreciationmethodProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public String getFormula() {
        return agent.target.getFormula();
      }

      public void setFormula(String formula) {
        String oldValue = agent.target.getFormula();
        agent.target.setFormula(formula);
        agent.updateWidgetsAndFireEvent(false, "formula", oldValue, formula);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("formula")) {
          return getFormula();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("formula")) {
          agent.target.setFormula((String) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Depreciationmethod) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Depreciationmethod.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_DepreciationmethodProxy((Depreciationmethod) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_DepreciationmethodProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy extends Partyrelationshipstatus implements BindableProxy {
      private BindableProxyAgent<Partyrelationshipstatus> agent;
      public com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy() {
        this(new Partyrelationshipstatus());
      }

      public com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy(Partyrelationshipstatus target) {
        agent = new BindableProxyAgent<Partyrelationshipstatus>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partyrelationshipstatus.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partyrelationshipstatus unwrap() {
        return agent.target;
      }

      public Partyrelationshipstatus deepUnwrap() {
        final Partyrelationshipstatus clone = new Partyrelationshipstatus();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partyrelationshipstatus) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partyrelationshipstatus.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy((Partyrelationshipstatus) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyrelationshipstatusProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PreferencetypeProxy extends Preferencetype implements BindableProxy {
      private BindableProxyAgent<Preferencetype> agent;
      public com_cloderia_helion_client_shared_model_PreferencetypeProxy() {
        this(new Preferencetype());
      }

      public com_cloderia_helion_client_shared_model_PreferencetypeProxy(Preferencetype target) {
        agent = new BindableProxyAgent<Preferencetype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Preferencetype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Preferencetype unwrap() {
        return agent.target;
      }

      public Preferencetype deepUnwrap() {
        final Preferencetype clone = new Preferencetype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PreferencetypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PreferencetypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Preferencetype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Preferencetype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PreferencetypeProxy((Preferencetype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PreferencetypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_UniverseProxy extends Universe implements BindableProxy {
      private BindableProxyAgent<Universe> agent;
      public com_cloderia_helion_client_shared_model_UniverseProxy() {
        this(new Universe());
      }

      public com_cloderia_helion_client_shared_model_UniverseProxy(Universe target) {
        agent = new BindableProxyAgent<Universe>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("parentUniverse", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("businessNo", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("universeTyCd", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Universe.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Universe unwrap() {
        return agent.target;
      }

      public Universe deepUnwrap() {
        final Universe clone = new Universe();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getParentUniverse() instanceof BindableProxy) {
          clone.setParentUniverse((Universe) ((BindableProxy) getParentUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentUniverse())) {
          clone.setParentUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentUniverse())).deepUnwrap());
        } else {
          clone.setParentUniverse(agent.target.getParentUniverse());
        }
        clone.setBusinessNo(agent.target.getBusinessNo());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setUniverseTyCd(agent.target.getUniverseTyCd());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_UniverseProxy) {
          obj = ((com_cloderia_helion_client_shared_model_UniverseProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Universe getParentUniverse() {
        return agent.target.getParentUniverse();
      }

      public void setParentUniverse(Universe parentUniverse) {
        if (agent.binders.containsKey("parentUniverse")) {
          parentUniverse = (Universe) agent.binders.get("parentUniverse").setModel(parentUniverse, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getParentUniverse();
        agent.target.setParentUniverse(parentUniverse);
        agent.updateWidgetsAndFireEvent(false, "parentUniverse", oldValue, parentUniverse);
      }

      public String getBusinessNo() {
        return agent.target.getBusinessNo();
      }

      public void setBusinessNo(String businessNo) {
        String oldValue = agent.target.getBusinessNo();
        agent.target.setBusinessNo(businessNo);
        agent.updateWidgetsAndFireEvent(false, "businessNo", oldValue, businessNo);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public String getUniverseTyCd() {
        return agent.target.getUniverseTyCd();
      }

      public void setUniverseTyCd(String universeTyCd) {
        String oldValue = agent.target.getUniverseTyCd();
        agent.target.setUniverseTyCd(universeTyCd);
        agent.updateWidgetsAndFireEvent(false, "universeTyCd", oldValue, universeTyCd);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("parentUniverse")) {
          return getParentUniverse();
        }
        if (property.equals("businessNo")) {
          return getBusinessNo();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("universeTyCd")) {
          return getUniverseTyCd();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("parentUniverse")) {
          agent.target.setParentUniverse((Universe) value);
          return;
        }
        if (property.equals("businessNo")) {
          agent.target.setBusinessNo((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("universeTyCd")) {
          agent.target.setUniverseTyCd((String) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Universe) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Universe.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_UniverseProxy((Universe) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_UniverseProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_RatingtypeProxy extends Ratingtype implements BindableProxy {
      private BindableProxyAgent<Ratingtype> agent;
      public com_cloderia_helion_client_shared_model_RatingtypeProxy() {
        this(new Ratingtype());
      }

      public com_cloderia_helion_client_shared_model_RatingtypeProxy(Ratingtype target) {
        agent = new BindableProxyAgent<Ratingtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Ratingtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Ratingtype unwrap() {
        return agent.target;
      }

      public Ratingtype deepUnwrap() {
        final Ratingtype clone = new Ratingtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_RatingtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_RatingtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Ratingtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Ratingtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_RatingtypeProxy((Ratingtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_RatingtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy extends Contactmechanismpurposetype implements BindableProxy {
      private BindableProxyAgent<Contactmechanismpurposetype> agent;
      public com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy() {
        this(new Contactmechanismpurposetype());
      }

      public com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy(Contactmechanismpurposetype target) {
        agent = new BindableProxyAgent<Contactmechanismpurposetype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Contactmechanismpurposetype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Contactmechanismpurposetype unwrap() {
        return agent.target;
      }

      public Contactmechanismpurposetype deepUnwrap() {
        final Contactmechanismpurposetype clone = new Contactmechanismpurposetype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Contactmechanismpurposetype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Contactmechanismpurposetype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy((Contactmechanismpurposetype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ContactmechanismpurposetypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgetstatustypeProxy extends Budgetstatustype implements BindableProxy {
      private BindableProxyAgent<Budgetstatustype> agent;
      public com_cloderia_helion_client_shared_model_BudgetstatustypeProxy() {
        this(new Budgetstatustype());
      }

      public com_cloderia_helion_client_shared_model_BudgetstatustypeProxy(Budgetstatustype target) {
        agent = new BindableProxyAgent<Budgetstatustype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Budgetstatustype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budgetstatustype unwrap() {
        return agent.target;
      }

      public Budgetstatustype deepUnwrap() {
        final Budgetstatustype clone = new Budgetstatustype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgetstatustypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgetstatustypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budgetstatustype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budgetstatustype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgetstatustypeProxy((Budgetstatustype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgetstatustypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductfeatureProxy extends Productfeature implements BindableProxy {
      private BindableProxyAgent<Productfeature> agent;
      public com_cloderia_helion_client_shared_model_ProductfeatureProxy() {
        this(new Productfeature());
      }

      public com_cloderia_helion_client_shared_model_ProductfeatureProxy(Productfeature target) {
        agent = new BindableProxyAgent<Productfeature>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("prodFeatTy", new PropertyType(Productfeaturetype.class, true, false));
        agent.propertyTypes.put("uom", new PropertyType(Uom.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("prodFeatCat", new PropertyType(Productfeaturecategory.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Productfeature.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Productfeature unwrap() {
        return agent.target;
      }

      public Productfeature deepUnwrap() {
        final Productfeature clone = new Productfeature();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getProdFeatTy() instanceof BindableProxy) {
          clone.setProdFeatTy((Productfeaturetype) ((BindableProxy) getProdFeatTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProdFeatTy())) {
          clone.setProdFeatTy((Productfeaturetype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProdFeatTy())).deepUnwrap());
        } else {
          clone.setProdFeatTy(agent.target.getProdFeatTy());
        }
        if (agent.target.getUom() instanceof BindableProxy) {
          clone.setUom((Uom) ((BindableProxy) getUom()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUom())) {
          clone.setUom((Uom) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUom())).deepUnwrap());
        } else {
          clone.setUom(agent.target.getUom());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getProdFeatCat() instanceof BindableProxy) {
          clone.setProdFeatCat((Productfeaturecategory) ((BindableProxy) getProdFeatCat()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProdFeatCat())) {
          clone.setProdFeatCat((Productfeaturecategory) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProdFeatCat())).deepUnwrap());
        } else {
          clone.setProdFeatCat(agent.target.getProdFeatCat());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductfeatureProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductfeatureProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Productfeaturetype getProdFeatTy() {
        return agent.target.getProdFeatTy();
      }

      public void setProdFeatTy(Productfeaturetype prodFeatTy) {
        if (agent.binders.containsKey("prodFeatTy")) {
          prodFeatTy = (Productfeaturetype) agent.binders.get("prodFeatTy").setModel(prodFeatTy, StateSync.FROM_MODEL, true);
        }
        Productfeaturetype oldValue = agent.target.getProdFeatTy();
        agent.target.setProdFeatTy(prodFeatTy);
        agent.updateWidgetsAndFireEvent(false, "prodFeatTy", oldValue, prodFeatTy);
      }

      public Uom getUom() {
        return agent.target.getUom();
      }

      public void setUom(Uom uom) {
        if (agent.binders.containsKey("uom")) {
          uom = (Uom) agent.binders.get("uom").setModel(uom, StateSync.FROM_MODEL, true);
        }
        Uom oldValue = agent.target.getUom();
        agent.target.setUom(uom);
        agent.updateWidgetsAndFireEvent(false, "uom", oldValue, uom);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Productfeaturecategory getProdFeatCat() {
        return agent.target.getProdFeatCat();
      }

      public void setProdFeatCat(Productfeaturecategory prodFeatCat) {
        if (agent.binders.containsKey("prodFeatCat")) {
          prodFeatCat = (Productfeaturecategory) agent.binders.get("prodFeatCat").setModel(prodFeatCat, StateSync.FROM_MODEL, true);
        }
        Productfeaturecategory oldValue = agent.target.getProdFeatCat();
        agent.target.setProdFeatCat(prodFeatCat);
        agent.updateWidgetsAndFireEvent(false, "prodFeatCat", oldValue, prodFeatCat);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("prodFeatTy")) {
          return getProdFeatTy();
        }
        if (property.equals("uom")) {
          return getUom();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("prodFeatCat")) {
          return getProdFeatCat();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("prodFeatTy")) {
          agent.target.setProdFeatTy((Productfeaturetype) value);
          return;
        }
        if (property.equals("uom")) {
          agent.target.setUom((Uom) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("prodFeatCat")) {
          agent.target.setProdFeatCat((Productfeaturecategory) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Productfeature) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Productfeature.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductfeatureProxy((Productfeature) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductfeatureProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy extends Paymentmethodtype implements BindableProxy {
      private BindableProxyAgent<Paymentmethodtype> agent;
      public com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy() {
        this(new Paymentmethodtype());
      }

      public com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy(Paymentmethodtype target) {
        agent = new BindableProxyAgent<Paymentmethodtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Paymentmethodtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Paymentmethodtype unwrap() {
        return agent.target;
      }

      public Paymentmethodtype deepUnwrap() {
        final Paymentmethodtype clone = new Paymentmethodtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Paymentmethodtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Paymentmethodtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy((Paymentmethodtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PaymentmethodtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoiceProxy extends Invoice implements BindableProxy {
      private BindableProxyAgent<Invoice> agent;
      public com_cloderia_helion_client_shared_model_InvoiceProxy() {
        this(new Invoice());
      }

      public com_cloderia_helion_client_shared_model_InvoiceProxy(Invoice target) {
        agent = new BindableProxyAgent<Invoice>(this, target);
        agent.propertyTypes.put("fromContMech", new PropertyType(Contactmechanism.class, true, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("message", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromParty", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("toContMech", new PropertyType(Contactmechanism.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("billingAcct", new PropertyType(Billingaccount.class, true, false));
        agent.propertyTypes.put("toParty", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoice.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoice unwrap() {
        return agent.target;
      }

      public Invoice deepUnwrap() {
        final Invoice clone = new Invoice();
        if (agent.target.getFromContMech() instanceof BindableProxy) {
          clone.setFromContMech((Contactmechanism) ((BindableProxy) getFromContMech()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFromContMech())) {
          clone.setFromContMech((Contactmechanism) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFromContMech())).deepUnwrap());
        } else {
          clone.setFromContMech(agent.target.getFromContMech());
        }
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setMessage(agent.target.getMessage());
        if (agent.target.getFromParty() instanceof BindableProxy) {
          clone.setFromParty((Party) ((BindableProxy) getFromParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFromParty())) {
          clone.setFromParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFromParty())).deepUnwrap());
        } else {
          clone.setFromParty(agent.target.getFromParty());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getToContMech() instanceof BindableProxy) {
          clone.setToContMech((Contactmechanism) ((BindableProxy) getToContMech()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToContMech())) {
          clone.setToContMech((Contactmechanism) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToContMech())).deepUnwrap());
        } else {
          clone.setToContMech(agent.target.getToContMech());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getBillingAcct() instanceof BindableProxy) {
          clone.setBillingAcct((Billingaccount) ((BindableProxy) getBillingAcct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getBillingAcct())) {
          clone.setBillingAcct((Billingaccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getBillingAcct())).deepUnwrap());
        } else {
          clone.setBillingAcct(agent.target.getBillingAcct());
        }
        if (agent.target.getToParty() instanceof BindableProxy) {
          clone.setToParty((Party) ((BindableProxy) getToParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToParty())) {
          clone.setToParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToParty())).deepUnwrap());
        } else {
          clone.setToParty(agent.target.getToParty());
        }
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoiceProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoiceProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Contactmechanism getFromContMech() {
        return agent.target.getFromContMech();
      }

      public void setFromContMech(Contactmechanism fromContMech) {
        if (agent.binders.containsKey("fromContMech")) {
          fromContMech = (Contactmechanism) agent.binders.get("fromContMech").setModel(fromContMech, StateSync.FROM_MODEL, true);
        }
        Contactmechanism oldValue = agent.target.getFromContMech();
        agent.target.setFromContMech(fromContMech);
        agent.updateWidgetsAndFireEvent(false, "fromContMech", oldValue, fromContMech);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public String getMessage() {
        return agent.target.getMessage();
      }

      public void setMessage(String message) {
        String oldValue = agent.target.getMessage();
        agent.target.setMessage(message);
        agent.updateWidgetsAndFireEvent(false, "message", oldValue, message);
      }

      public Party getFromParty() {
        return agent.target.getFromParty();
      }

      public void setFromParty(Party fromParty) {
        if (agent.binders.containsKey("fromParty")) {
          fromParty = (Party) agent.binders.get("fromParty").setModel(fromParty, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getFromParty();
        agent.target.setFromParty(fromParty);
        agent.updateWidgetsAndFireEvent(false, "fromParty", oldValue, fromParty);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Contactmechanism getToContMech() {
        return agent.target.getToContMech();
      }

      public void setToContMech(Contactmechanism toContMech) {
        if (agent.binders.containsKey("toContMech")) {
          toContMech = (Contactmechanism) agent.binders.get("toContMech").setModel(toContMech, StateSync.FROM_MODEL, true);
        }
        Contactmechanism oldValue = agent.target.getToContMech();
        agent.target.setToContMech(toContMech);
        agent.updateWidgetsAndFireEvent(false, "toContMech", oldValue, toContMech);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Billingaccount getBillingAcct() {
        return agent.target.getBillingAcct();
      }

      public void setBillingAcct(Billingaccount billingAcct) {
        if (agent.binders.containsKey("billingAcct")) {
          billingAcct = (Billingaccount) agent.binders.get("billingAcct").setModel(billingAcct, StateSync.FROM_MODEL, true);
        }
        Billingaccount oldValue = agent.target.getBillingAcct();
        agent.target.setBillingAcct(billingAcct);
        agent.updateWidgetsAndFireEvent(false, "billingAcct", oldValue, billingAcct);
      }

      public Party getToParty() {
        return agent.target.getToParty();
      }

      public void setToParty(Party toParty) {
        if (agent.binders.containsKey("toParty")) {
          toParty = (Party) agent.binders.get("toParty").setModel(toParty, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getToParty();
        agent.target.setToParty(toParty);
        agent.updateWidgetsAndFireEvent(false, "toParty", oldValue, toParty);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("fromContMech")) {
          return getFromContMech();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("message")) {
          return getMessage();
        }
        if (property.equals("fromParty")) {
          return getFromParty();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("toContMech")) {
          return getToContMech();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("billingAcct")) {
          return getBillingAcct();
        }
        if (property.equals("toParty")) {
          return getToParty();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("fromContMech")) {
          agent.target.setFromContMech((Contactmechanism) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("message")) {
          agent.target.setMessage((String) value);
          return;
        }
        if (property.equals("fromParty")) {
          agent.target.setFromParty((Party) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("toContMech")) {
          agent.target.setToContMech((Contactmechanism) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("billingAcct")) {
          agent.target.setBillingAcct((Billingaccount) value);
          return;
        }
        if (property.equals("toParty")) {
          agent.target.setToParty((Party) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoice) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoice.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoiceProxy((Invoice) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoiceProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementitemtypeProxy extends Agreementitemtype implements BindableProxy {
      private BindableProxyAgent<Agreementitemtype> agent;
      public com_cloderia_helion_client_shared_model_AgreementitemtypeProxy() {
        this(new Agreementitemtype());
      }

      public com_cloderia_helion_client_shared_model_AgreementitemtypeProxy(Agreementitemtype target) {
        agent = new BindableProxyAgent<Agreementitemtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementitemtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementitemtype unwrap() {
        return agent.target;
      }

      public Agreementitemtype deepUnwrap() {
        final Agreementitemtype clone = new Agreementitemtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementitemtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementitemtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementitemtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementitemtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementitemtypeProxy((Agreementitemtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementitemtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy extends Partyrelationshiptype implements BindableProxy {
      private BindableProxyAgent<Partyrelationshiptype> agent;
      public com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy() {
        this(new Partyrelationshiptype());
      }

      public com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy(Partyrelationshiptype target) {
        agent = new BindableProxyAgent<Partyrelationshiptype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partyrelationshiptype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partyrelationshiptype unwrap() {
        return agent.target;
      }

      public Partyrelationshiptype deepUnwrap() {
        final Partyrelationshiptype clone = new Partyrelationshiptype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partyrelationshiptype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partyrelationshiptype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy((Partyrelationshiptype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyrelationshiptypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy extends Productfeaturecategory implements BindableProxy {
      private BindableProxyAgent<Productfeaturecategory> agent;
      public com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy() {
        this(new Productfeaturecategory());
      }

      public com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy(Productfeaturecategory target) {
        agent = new BindableProxyAgent<Productfeaturecategory>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Productfeaturecategory.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Productfeaturecategory unwrap() {
        return agent.target;
      }

      public Productfeaturecategory deepUnwrap() {
        final Productfeaturecategory clone = new Productfeaturecategory();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Productfeaturecategory) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Productfeaturecategory.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy((Productfeaturecategory) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductfeaturecategoryProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ContainerProxy extends Container implements BindableProxy {
      private BindableProxyAgent<Container> agent;
      public com_cloderia_helion_client_shared_model_ContainerProxy() {
        this(new Container());
      }

      public com_cloderia_helion_client_shared_model_ContainerProxy(Container target) {
        agent = new BindableProxyAgent<Container>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("containerTy", new PropertyType(Containertype.class, true, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("facility", new PropertyType(Facility.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Container.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Container unwrap() {
        return agent.target;
      }

      public Container deepUnwrap() {
        final Container clone = new Container();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getContainerTy() instanceof BindableProxy) {
          clone.setContainerTy((Containertype) ((BindableProxy) getContainerTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getContainerTy())) {
          clone.setContainerTy((Containertype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getContainerTy())).deepUnwrap());
        } else {
          clone.setContainerTy(agent.target.getContainerTy());
        }
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getFacility() instanceof BindableProxy) {
          clone.setFacility((Facility) ((BindableProxy) getFacility()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFacility())) {
          clone.setFacility((Facility) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFacility())).deepUnwrap());
        } else {
          clone.setFacility(agent.target.getFacility());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ContainerProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ContainerProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Containertype getContainerTy() {
        return agent.target.getContainerTy();
      }

      public void setContainerTy(Containertype containerTy) {
        if (agent.binders.containsKey("containerTy")) {
          containerTy = (Containertype) agent.binders.get("containerTy").setModel(containerTy, StateSync.FROM_MODEL, true);
        }
        Containertype oldValue = agent.target.getContainerTy();
        agent.target.setContainerTy(containerTy);
        agent.updateWidgetsAndFireEvent(false, "containerTy", oldValue, containerTy);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Facility getFacility() {
        return agent.target.getFacility();
      }

      public void setFacility(Facility facility) {
        if (agent.binders.containsKey("facility")) {
          facility = (Facility) agent.binders.get("facility").setModel(facility, StateSync.FROM_MODEL, true);
        }
        Facility oldValue = agent.target.getFacility();
        agent.target.setFacility(facility);
        agent.updateWidgetsAndFireEvent(false, "facility", oldValue, facility);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("containerTy")) {
          return getContainerTy();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("facility")) {
          return getFacility();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("containerTy")) {
          agent.target.setContainerTy((Containertype) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("facility")) {
          agent.target.setFacility((Facility) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Container) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Container.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ContainerProxy((Container) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ContainerProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy extends Invoiceitemtype implements BindableProxy {
      private BindableProxyAgent<Invoiceitemtype> agent;
      public com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy() {
        this(new Invoiceitemtype());
      }

      public com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy(Invoiceitemtype target) {
        agent = new BindableProxyAgent<Invoiceitemtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("parentItemTy", new PropertyType(Invoiceitemtype.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoiceitemtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoiceitemtype unwrap() {
        return agent.target;
      }

      public Invoiceitemtype deepUnwrap() {
        final Invoiceitemtype clone = new Invoiceitemtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getParentItemTy() instanceof BindableProxy) {
          clone.setParentItemTy((Invoiceitemtype) ((BindableProxy) getParentItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentItemTy())) {
          clone.setParentItemTy((Invoiceitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentItemTy())).deepUnwrap());
        } else {
          clone.setParentItemTy(agent.target.getParentItemTy());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Invoiceitemtype getParentItemTy() {
        return agent.target.getParentItemTy();
      }

      public void setParentItemTy(Invoiceitemtype parentItemTy) {
        if (agent.binders.containsKey("parentItemTy")) {
          parentItemTy = (Invoiceitemtype) agent.binders.get("parentItemTy").setModel(parentItemTy, StateSync.FROM_MODEL, true);
        }
        Invoiceitemtype oldValue = agent.target.getParentItemTy();
        agent.target.setParentItemTy(parentItemTy);
        agent.updateWidgetsAndFireEvent(false, "parentItemTy", oldValue, parentItemTy);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("parentItemTy")) {
          return getParentItemTy();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("parentItemTy")) {
          agent.target.setParentItemTy((Invoiceitemtype) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoiceitemtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoiceitemtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy((Invoiceitemtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoiceitemtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy extends Productfeaturetype implements BindableProxy {
      private BindableProxyAgent<Productfeaturetype> agent;
      public com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy() {
        this(new Productfeaturetype());
      }

      public com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy(Productfeaturetype target) {
        agent = new BindableProxyAgent<Productfeaturetype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Productfeaturetype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Productfeaturetype unwrap() {
        return agent.target;
      }

      public Productfeaturetype deepUnwrap() {
        final Productfeaturetype clone = new Productfeaturetype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Productfeaturetype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Productfeaturetype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy((Productfeaturetype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductfeaturetypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy extends Financialaccountroletype implements BindableProxy {
      private BindableProxyAgent<Financialaccountroletype> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy() {
        this(new Financialaccountroletype());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy(Financialaccountroletype target) {
        agent = new BindableProxyAgent<Financialaccountroletype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccountroletype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccountroletype unwrap() {
        return agent.target;
      }

      public Financialaccountroletype deepUnwrap() {
        final Financialaccountroletype clone = new Financialaccountroletype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccountroletype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccountroletype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy((Financialaccountroletype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccountroletypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy extends Financialaccounttransactiontype implements BindableProxy {
      private BindableProxyAgent<Financialaccounttransactiontype> agent;
      public com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy() {
        this(new Financialaccounttransactiontype());
      }

      public com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy(Financialaccounttransactiontype target) {
        agent = new BindableProxyAgent<Financialaccounttransactiontype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Financialaccounttransactiontype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Financialaccounttransactiontype unwrap() {
        return agent.target;
      }

      public Financialaccounttransactiontype deepUnwrap() {
        final Financialaccounttransactiontype clone = new Financialaccounttransactiontype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Financialaccounttransactiontype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Financialaccounttransactiontype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy((Financialaccounttransactiontype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FinancialaccounttransactiontypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyProxy extends Party implements BindableProxy {
      private BindableProxyAgent<Party> agent;
      public com_cloderia_helion_client_shared_model_PartyProxy() {
        this(new Party());
      }

      public com_cloderia_helion_client_shared_model_PartyProxy(Party target) {
        agent = new BindableProxyAgent<Party>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("partyTy", new PropertyType(Partytype.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Party.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Party unwrap() {
        return agent.target;
      }

      public Party deepUnwrap() {
        final Party clone = new Party();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getPartyTy() instanceof BindableProxy) {
          clone.setPartyTy((Partytype) ((BindableProxy) getPartyTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyTy())) {
          clone.setPartyTy((Partytype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyTy())).deepUnwrap());
        } else {
          clone.setPartyTy(agent.target.getPartyTy());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Partytype getPartyTy() {
        return agent.target.getPartyTy();
      }

      public void setPartyTy(Partytype partyTy) {
        if (agent.binders.containsKey("partyTy")) {
          partyTy = (Partytype) agent.binders.get("partyTy").setModel(partyTy, StateSync.FROM_MODEL, true);
        }
        Partytype oldValue = agent.target.getPartyTy();
        agent.target.setPartyTy(partyTy);
        agent.updateWidgetsAndFireEvent(false, "partyTy", oldValue, partyTy);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("partyTy")) {
          return getPartyTy();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("partyTy")) {
          agent.target.setPartyTy((Partytype) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Party) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Party.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyProxy((Party) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_TermtypeProxy extends Termtype implements BindableProxy {
      private BindableProxyAgent<Termtype> agent;
      public com_cloderia_helion_client_shared_model_TermtypeProxy() {
        this(new Termtype());
      }

      public com_cloderia_helion_client_shared_model_TermtypeProxy(Termtype target) {
        agent = new BindableProxyAgent<Termtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Termtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Termtype unwrap() {
        return agent.target;
      }

      public Termtype deepUnwrap() {
        final Termtype clone = new Termtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_TermtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_TermtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Termtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Termtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_TermtypeProxy((Termtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_TermtypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoicetermProxy extends Invoiceterm implements BindableProxy {
      private BindableProxyAgent<Invoiceterm> agent;
      public com_cloderia_helion_client_shared_model_InvoicetermProxy() {
        this(new Invoiceterm());
      }

      public com_cloderia_helion_client_shared_model_InvoicetermProxy(Invoiceterm target) {
        agent = new BindableProxyAgent<Invoiceterm>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("termTy", new PropertyType(Termtype.class, true, false));
        agent.propertyTypes.put("termValue", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("invoiceItem", new PropertyType(Invoiceitem.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("invoice", new PropertyType(Invoice.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoiceterm.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoiceterm unwrap() {
        return agent.target;
      }

      public Invoiceterm deepUnwrap() {
        final Invoiceterm clone = new Invoiceterm();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getTermTy() instanceof BindableProxy) {
          clone.setTermTy((Termtype) ((BindableProxy) getTermTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTermTy())) {
          clone.setTermTy((Termtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTermTy())).deepUnwrap());
        } else {
          clone.setTermTy(agent.target.getTermTy());
        }
        clone.setTermValue(agent.target.getTermValue());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getInvoiceItem() instanceof BindableProxy) {
          clone.setInvoiceItem((Invoiceitem) ((BindableProxy) getInvoiceItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoiceItem())) {
          clone.setInvoiceItem((Invoiceitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoiceItem())).deepUnwrap());
        } else {
          clone.setInvoiceItem(agent.target.getInvoiceItem());
        }
        clone.setId(agent.target.getId());
        if (agent.target.getInvoice() instanceof BindableProxy) {
          clone.setInvoice((Invoice) ((BindableProxy) getInvoice()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoice())) {
          clone.setInvoice((Invoice) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoice())).deepUnwrap());
        } else {
          clone.setInvoice(agent.target.getInvoice());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoicetermProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoicetermProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Termtype getTermTy() {
        return agent.target.getTermTy();
      }

      public void setTermTy(Termtype termTy) {
        if (agent.binders.containsKey("termTy")) {
          termTy = (Termtype) agent.binders.get("termTy").setModel(termTy, StateSync.FROM_MODEL, true);
        }
        Termtype oldValue = agent.target.getTermTy();
        agent.target.setTermTy(termTy);
        agent.updateWidgetsAndFireEvent(false, "termTy", oldValue, termTy);
      }

      public Integer getTermValue() {
        return agent.target.getTermValue();
      }

      public void setTermValue(Integer termValue) {
        Integer oldValue = agent.target.getTermValue();
        agent.target.setTermValue(termValue);
        agent.updateWidgetsAndFireEvent(false, "termValue", oldValue, termValue);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Invoiceitem getInvoiceItem() {
        return agent.target.getInvoiceItem();
      }

      public void setInvoiceItem(Invoiceitem invoiceItem) {
        if (agent.binders.containsKey("invoiceItem")) {
          invoiceItem = (Invoiceitem) agent.binders.get("invoiceItem").setModel(invoiceItem, StateSync.FROM_MODEL, true);
        }
        Invoiceitem oldValue = agent.target.getInvoiceItem();
        agent.target.setInvoiceItem(invoiceItem);
        agent.updateWidgetsAndFireEvent(false, "invoiceItem", oldValue, invoiceItem);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Invoice getInvoice() {
        return agent.target.getInvoice();
      }

      public void setInvoice(Invoice invoice) {
        if (agent.binders.containsKey("invoice")) {
          invoice = (Invoice) agent.binders.get("invoice").setModel(invoice, StateSync.FROM_MODEL, true);
        }
        Invoice oldValue = agent.target.getInvoice();
        agent.target.setInvoice(invoice);
        agent.updateWidgetsAndFireEvent(false, "invoice", oldValue, invoice);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("termTy")) {
          return getTermTy();
        }
        if (property.equals("termValue")) {
          return getTermValue();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("invoiceItem")) {
          return getInvoiceItem();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("invoice")) {
          return getInvoice();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("termTy")) {
          agent.target.setTermTy((Termtype) value);
          return;
        }
        if (property.equals("termValue")) {
          agent.target.setTermValue((Integer) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("invoiceItem")) {
          agent.target.setInvoiceItem((Invoiceitem) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("invoice")) {
          agent.target.setInvoice((Invoice) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoiceterm) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoiceterm.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoicetermProxy((Invoiceterm) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoicetermProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyroleProxy extends Partyrole implements BindableProxy {
      private BindableProxyAgent<Partyrole> agent;
      public com_cloderia_helion_client_shared_model_PartyroleProxy() {
        this(new Partyrole());
      }

      public com_cloderia_helion_client_shared_model_PartyroleProxy(Partyrole target) {
        agent = new BindableProxyAgent<Partyrole>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("partyRoleTy", new PropertyType(Partyroletype.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partyrole.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partyrole unwrap() {
        return agent.target;
      }

      public Partyrole deepUnwrap() {
        final Partyrole clone = new Partyrole();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getPartyRoleTy() instanceof BindableProxy) {
          clone.setPartyRoleTy((Partyroletype) ((BindableProxy) getPartyRoleTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyRoleTy())) {
          clone.setPartyRoleTy((Partyroletype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyRoleTy())).deepUnwrap());
        } else {
          clone.setPartyRoleTy(agent.target.getPartyRoleTy());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyroleProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyroleProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Partyroletype getPartyRoleTy() {
        return agent.target.getPartyRoleTy();
      }

      public void setPartyRoleTy(Partyroletype partyRoleTy) {
        if (agent.binders.containsKey("partyRoleTy")) {
          partyRoleTy = (Partyroletype) agent.binders.get("partyRoleTy").setModel(partyRoleTy, StateSync.FROM_MODEL, true);
        }
        Partyroletype oldValue = agent.target.getPartyRoleTy();
        agent.target.setPartyRoleTy(partyRoleTy);
        agent.updateWidgetsAndFireEvent(false, "partyRoleTy", oldValue, partyRoleTy);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("partyRoleTy")) {
          return getPartyRoleTy();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("partyRoleTy")) {
          agent.target.setPartyRoleTy((Partyroletype) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partyrole) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partyrole.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyroleProxy((Partyrole) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyroleProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_GeoboundrytypeProxy extends Geoboundrytype implements BindableProxy {
      private BindableProxyAgent<Geoboundrytype> agent;
      public com_cloderia_helion_client_shared_model_GeoboundrytypeProxy() {
        this(new Geoboundrytype());
      }

      public com_cloderia_helion_client_shared_model_GeoboundrytypeProxy(Geoboundrytype target) {
        agent = new BindableProxyAgent<Geoboundrytype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Geoboundrytype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Geoboundrytype unwrap() {
        return agent.target;
      }

      public Geoboundrytype deepUnwrap() {
        final Geoboundrytype clone = new Geoboundrytype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_GeoboundrytypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_GeoboundrytypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Geoboundrytype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Geoboundrytype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_GeoboundrytypeProxy((Geoboundrytype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_GeoboundrytypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_GeoboundryProxy extends Geoboundry implements BindableProxy {
      private BindableProxyAgent<Geoboundry> agent;
      public com_cloderia_helion_client_shared_model_GeoboundryProxy() {
        this(new Geoboundry());
      }

      public com_cloderia_helion_client_shared_model_GeoboundryProxy(Geoboundry target) {
        agent = new BindableProxyAgent<Geoboundry>(this, target);
        agent.propertyTypes.put("geoBoundryTy", new PropertyType(Geoboundrytype.class, true, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("geoCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("parentGeoBoundry", new PropertyType(Geoboundry.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("abbr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Geoboundry.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Geoboundry unwrap() {
        return agent.target;
      }

      public Geoboundry deepUnwrap() {
        final Geoboundry clone = new Geoboundry();
        if (agent.target.getGeoBoundryTy() instanceof BindableProxy) {
          clone.setGeoBoundryTy((Geoboundrytype) ((BindableProxy) getGeoBoundryTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getGeoBoundryTy())) {
          clone.setGeoBoundryTy((Geoboundrytype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getGeoBoundryTy())).deepUnwrap());
        } else {
          clone.setGeoBoundryTy(agent.target.getGeoBoundryTy());
        }
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setGeoCode(agent.target.getGeoCode());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getParentGeoBoundry() instanceof BindableProxy) {
          clone.setParentGeoBoundry((Geoboundry) ((BindableProxy) getParentGeoBoundry()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentGeoBoundry())) {
          clone.setParentGeoBoundry((Geoboundry) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentGeoBoundry())).deepUnwrap());
        } else {
          clone.setParentGeoBoundry(agent.target.getParentGeoBoundry());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setAbbr(agent.target.getAbbr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_GeoboundryProxy) {
          obj = ((com_cloderia_helion_client_shared_model_GeoboundryProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Geoboundrytype getGeoBoundryTy() {
        return agent.target.getGeoBoundryTy();
      }

      public void setGeoBoundryTy(Geoboundrytype geoBoundryTy) {
        if (agent.binders.containsKey("geoBoundryTy")) {
          geoBoundryTy = (Geoboundrytype) agent.binders.get("geoBoundryTy").setModel(geoBoundryTy, StateSync.FROM_MODEL, true);
        }
        Geoboundrytype oldValue = agent.target.getGeoBoundryTy();
        agent.target.setGeoBoundryTy(geoBoundryTy);
        agent.updateWidgetsAndFireEvent(false, "geoBoundryTy", oldValue, geoBoundryTy);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getGeoCode() {
        return agent.target.getGeoCode();
      }

      public void setGeoCode(String geoCode) {
        String oldValue = agent.target.getGeoCode();
        agent.target.setGeoCode(geoCode);
        agent.updateWidgetsAndFireEvent(false, "geoCode", oldValue, geoCode);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Geoboundry getParentGeoBoundry() {
        return agent.target.getParentGeoBoundry();
      }

      public void setParentGeoBoundry(Geoboundry parentGeoBoundry) {
        if (agent.binders.containsKey("parentGeoBoundry")) {
          parentGeoBoundry = (Geoboundry) agent.binders.get("parentGeoBoundry").setModel(parentGeoBoundry, StateSync.FROM_MODEL, true);
        }
        Geoboundry oldValue = agent.target.getParentGeoBoundry();
        agent.target.setParentGeoBoundry(parentGeoBoundry);
        agent.updateWidgetsAndFireEvent(false, "parentGeoBoundry", oldValue, parentGeoBoundry);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public String getAbbr() {
        return agent.target.getAbbr();
      }

      public void setAbbr(String abbr) {
        String oldValue = agent.target.getAbbr();
        agent.target.setAbbr(abbr);
        agent.updateWidgetsAndFireEvent(false, "abbr", oldValue, abbr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("geoBoundryTy")) {
          return getGeoBoundryTy();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("geoCode")) {
          return getGeoCode();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("parentGeoBoundry")) {
          return getParentGeoBoundry();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("abbr")) {
          return getAbbr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("geoBoundryTy")) {
          agent.target.setGeoBoundryTy((Geoboundrytype) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("geoCode")) {
          agent.target.setGeoCode((String) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("parentGeoBoundry")) {
          agent.target.setParentGeoBoundry((Geoboundry) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("abbr")) {
          agent.target.setAbbr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Geoboundry) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Geoboundry.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_GeoboundryProxy((Geoboundry) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_GeoboundryProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_GlbudgetxrefProxy extends Glbudgetxref implements BindableProxy {
      private BindableProxyAgent<Glbudgetxref> agent;
      public com_cloderia_helion_client_shared_model_GlbudgetxrefProxy() {
        this(new Glbudgetxref());
      }

      public com_cloderia_helion_client_shared_model_GlbudgetxrefProxy(Glbudgetxref target) {
        agent = new BindableProxyAgent<Glbudgetxref>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("amount", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("budgetItemTy", new PropertyType(Budgetitemtype.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("glAccount", new PropertyType(Generalledgeraccount.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("allocPercentage", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Glbudgetxref.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Glbudgetxref unwrap() {
        return agent.target;
      }

      public Glbudgetxref deepUnwrap() {
        final Glbudgetxref clone = new Glbudgetxref();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setAmount(agent.target.getAmount());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getBudgetItemTy() instanceof BindableProxy) {
          clone.setBudgetItemTy((Budgetitemtype) ((BindableProxy) getBudgetItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getBudgetItemTy())) {
          clone.setBudgetItemTy((Budgetitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getBudgetItemTy())).deepUnwrap());
        } else {
          clone.setBudgetItemTy(agent.target.getBudgetItemTy());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getGlAccount() instanceof BindableProxy) {
          clone.setGlAccount((Generalledgeraccount) ((BindableProxy) getGlAccount()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getGlAccount())) {
          clone.setGlAccount((Generalledgeraccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getGlAccount())).deepUnwrap());
        } else {
          clone.setGlAccount(agent.target.getGlAccount());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setAllocPercentage(agent.target.getAllocPercentage());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_GlbudgetxrefProxy) {
          obj = ((com_cloderia_helion_client_shared_model_GlbudgetxrefProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public BigDecimal getAmount() {
        return agent.target.getAmount();
      }

      public void setAmount(BigDecimal amount) {
        BigDecimal oldValue = agent.target.getAmount();
        agent.target.setAmount(amount);
        agent.updateWidgetsAndFireEvent(false, "amount", oldValue, amount);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Budgetitemtype getBudgetItemTy() {
        return agent.target.getBudgetItemTy();
      }

      public void setBudgetItemTy(Budgetitemtype budgetItemTy) {
        if (agent.binders.containsKey("budgetItemTy")) {
          budgetItemTy = (Budgetitemtype) agent.binders.get("budgetItemTy").setModel(budgetItemTy, StateSync.FROM_MODEL, true);
        }
        Budgetitemtype oldValue = agent.target.getBudgetItemTy();
        agent.target.setBudgetItemTy(budgetItemTy);
        agent.updateWidgetsAndFireEvent(false, "budgetItemTy", oldValue, budgetItemTy);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Generalledgeraccount getGlAccount() {
        return agent.target.getGlAccount();
      }

      public void setGlAccount(Generalledgeraccount glAccount) {
        if (agent.binders.containsKey("glAccount")) {
          glAccount = (Generalledgeraccount) agent.binders.get("glAccount").setModel(glAccount, StateSync.FROM_MODEL, true);
        }
        Generalledgeraccount oldValue = agent.target.getGlAccount();
        agent.target.setGlAccount(glAccount);
        agent.updateWidgetsAndFireEvent(false, "glAccount", oldValue, glAccount);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Integer getAllocPercentage() {
        return agent.target.getAllocPercentage();
      }

      public void setAllocPercentage(Integer allocPercentage) {
        Integer oldValue = agent.target.getAllocPercentage();
        agent.target.setAllocPercentage(allocPercentage);
        agent.updateWidgetsAndFireEvent(false, "allocPercentage", oldValue, allocPercentage);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("amount")) {
          return getAmount();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("budgetItemTy")) {
          return getBudgetItemTy();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("glAccount")) {
          return getGlAccount();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("allocPercentage")) {
          return getAllocPercentage();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("amount")) {
          agent.target.setAmount((BigDecimal) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("budgetItemTy")) {
          agent.target.setBudgetItemTy((Budgetitemtype) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("glAccount")) {
          agent.target.setGlAccount((Generalledgeraccount) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("allocPercentage")) {
          agent.target.setAllocPercentage((Integer) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Glbudgetxref) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Glbudgetxref.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_GlbudgetxrefProxy((Glbudgetxref) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_GlbudgetxrefProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy extends Fixedassetdepreciationmethod implements BindableProxy {
      private BindableProxyAgent<Fixedassetdepreciationmethod> agent;
      public com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy() {
        this(new Fixedassetdepreciationmethod());
      }

      public com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy(Fixedassetdepreciationmethod target) {
        agent = new BindableProxyAgent<Fixedassetdepreciationmethod>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("depMethod", new PropertyType(Depreciationmethod.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("fixedAsset", new PropertyType(Fixedasset.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Fixedassetdepreciationmethod.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Fixedassetdepreciationmethod unwrap() {
        return agent.target;
      }

      public Fixedassetdepreciationmethod deepUnwrap() {
        final Fixedassetdepreciationmethod clone = new Fixedassetdepreciationmethod();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getDepMethod() instanceof BindableProxy) {
          clone.setDepMethod((Depreciationmethod) ((BindableProxy) getDepMethod()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getDepMethod())) {
          clone.setDepMethod((Depreciationmethod) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getDepMethod())).deepUnwrap());
        } else {
          clone.setDepMethod(agent.target.getDepMethod());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getFixedAsset() instanceof BindableProxy) {
          clone.setFixedAsset((Fixedasset) ((BindableProxy) getFixedAsset()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFixedAsset())) {
          clone.setFixedAsset((Fixedasset) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFixedAsset())).deepUnwrap());
        } else {
          clone.setFixedAsset(agent.target.getFixedAsset());
        }
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Depreciationmethod getDepMethod() {
        return agent.target.getDepMethod();
      }

      public void setDepMethod(Depreciationmethod depMethod) {
        if (agent.binders.containsKey("depMethod")) {
          depMethod = (Depreciationmethod) agent.binders.get("depMethod").setModel(depMethod, StateSync.FROM_MODEL, true);
        }
        Depreciationmethod oldValue = agent.target.getDepMethod();
        agent.target.setDepMethod(depMethod);
        agent.updateWidgetsAndFireEvent(false, "depMethod", oldValue, depMethod);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Fixedasset getFixedAsset() {
        return agent.target.getFixedAsset();
      }

      public void setFixedAsset(Fixedasset fixedAsset) {
        if (agent.binders.containsKey("fixedAsset")) {
          fixedAsset = (Fixedasset) agent.binders.get("fixedAsset").setModel(fixedAsset, StateSync.FROM_MODEL, true);
        }
        Fixedasset oldValue = agent.target.getFixedAsset();
        agent.target.setFixedAsset(fixedAsset);
        agent.updateWidgetsAndFireEvent(false, "fixedAsset", oldValue, fixedAsset);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("depMethod")) {
          return getDepMethod();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("fixedAsset")) {
          return getFixedAsset();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("depMethod")) {
          agent.target.setDepMethod((Depreciationmethod) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("fixedAsset")) {
          agent.target.setFixedAsset((Fixedasset) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Fixedassetdepreciationmethod) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Fixedassetdepreciationmethod.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy((Fixedassetdepreciationmethod) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FixedassetdepreciationmethodProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PaymenttypeProxy extends Paymenttype implements BindableProxy {
      private BindableProxyAgent<Paymenttype> agent;
      public com_cloderia_helion_client_shared_model_PaymenttypeProxy() {
        this(new Paymenttype());
      }

      public com_cloderia_helion_client_shared_model_PaymenttypeProxy(Paymenttype target) {
        agent = new BindableProxyAgent<Paymenttype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Paymenttype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Paymenttype unwrap() {
        return agent.target;
      }

      public Paymenttype deepUnwrap() {
        final Paymenttype clone = new Paymenttype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PaymenttypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PaymenttypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Paymenttype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Paymenttype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PaymenttypeProxy((Paymenttype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PaymenttypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementitemProxy extends Agreementitem implements BindableProxy {
      private BindableProxyAgent<Agreementitem> agent;
      public com_cloderia_helion_client_shared_model_AgreementitemProxy() {
        this(new Agreementitem());
      }

      public com_cloderia_helion_client_shared_model_AgreementitemProxy(Agreementitem target) {
        agent = new BindableProxyAgent<Agreementitem>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("agreement", new PropertyType(Agreement.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("agreementItemTy", new PropertyType(Agreementitemtype.class, true, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("agreementDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("agreementText", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("agreementImage", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("agreementItem", new PropertyType(Agreementitem.class, true, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementitem.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementitem unwrap() {
        return agent.target;
      }

      public Agreementitem deepUnwrap() {
        final Agreementitem clone = new Agreementitem();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getAgreement() instanceof BindableProxy) {
          clone.setAgreement((Agreement) ((BindableProxy) getAgreement()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreement())) {
          clone.setAgreement((Agreement) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreement())).deepUnwrap());
        } else {
          clone.setAgreement(agent.target.getAgreement());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        if (agent.target.getAgreementItemTy() instanceof BindableProxy) {
          clone.setAgreementItemTy((Agreementitemtype) ((BindableProxy) getAgreementItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreementItemTy())) {
          clone.setAgreementItemTy((Agreementitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreementItemTy())).deepUnwrap());
        } else {
          clone.setAgreementItemTy(agent.target.getAgreementItemTy());
        }
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setAgreementDt(agent.target.getAgreementDt());
        clone.setDescription(agent.target.getDescription());
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        clone.setAgreementText(agent.target.getAgreementText());
        clone.setAgreementImage(agent.target.getAgreementImage());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getAgreementItem() instanceof BindableProxy) {
          clone.setAgreementItem((Agreementitem) ((BindableProxy) getAgreementItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreementItem())) {
          clone.setAgreementItem((Agreementitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreementItem())).deepUnwrap());
        } else {
          clone.setAgreementItem(agent.target.getAgreementItem());
        }
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementitemProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementitemProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Agreement getAgreement() {
        return agent.target.getAgreement();
      }

      public void setAgreement(Agreement agreement) {
        if (agent.binders.containsKey("agreement")) {
          agreement = (Agreement) agent.binders.get("agreement").setModel(agreement, StateSync.FROM_MODEL, true);
        }
        Agreement oldValue = agent.target.getAgreement();
        agent.target.setAgreement(agreement);
        agent.updateWidgetsAndFireEvent(false, "agreement", oldValue, agreement);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Agreementitemtype getAgreementItemTy() {
        return agent.target.getAgreementItemTy();
      }

      public void setAgreementItemTy(Agreementitemtype agreementItemTy) {
        if (agent.binders.containsKey("agreementItemTy")) {
          agreementItemTy = (Agreementitemtype) agent.binders.get("agreementItemTy").setModel(agreementItemTy, StateSync.FROM_MODEL, true);
        }
        Agreementitemtype oldValue = agent.target.getAgreementItemTy();
        agent.target.setAgreementItemTy(agreementItemTy);
        agent.updateWidgetsAndFireEvent(false, "agreementItemTy", oldValue, agreementItemTy);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getAgreementDt() {
        return agent.target.getAgreementDt();
      }

      public void setAgreementDt(Date agreementDt) {
        Date oldValue = agent.target.getAgreementDt();
        agent.target.setAgreementDt(agreementDt);
        agent.updateWidgetsAndFireEvent(false, "agreementDt", oldValue, agreementDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public BigDecimal getAgreementText() {
        return agent.target.getAgreementText();
      }

      public void setAgreementText(BigDecimal agreementText) {
        BigDecimal oldValue = agent.target.getAgreementText();
        agent.target.setAgreementText(agreementText);
        agent.updateWidgetsAndFireEvent(false, "agreementText", oldValue, agreementText);
      }

      public BigDecimal getAgreementImage() {
        return agent.target.getAgreementImage();
      }

      public void setAgreementImage(BigDecimal agreementImage) {
        BigDecimal oldValue = agent.target.getAgreementImage();
        agent.target.setAgreementImage(agreementImage);
        agent.updateWidgetsAndFireEvent(false, "agreementImage", oldValue, agreementImage);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Agreementitem getAgreementItem() {
        return agent.target.getAgreementItem();
      }

      public void setAgreementItem(Agreementitem agreementItem) {
        if (agent.binders.containsKey("agreementItem")) {
          agreementItem = (Agreementitem) agent.binders.get("agreementItem").setModel(agreementItem, StateSync.FROM_MODEL, true);
        }
        Agreementitem oldValue = agent.target.getAgreementItem();
        agent.target.setAgreementItem(agreementItem);
        agent.updateWidgetsAndFireEvent(false, "agreementItem", oldValue, agreementItem);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("agreement")) {
          return getAgreement();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("agreementItemTy")) {
          return getAgreementItemTy();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("agreementDt")) {
          return getAgreementDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("agreementText")) {
          return getAgreementText();
        }
        if (property.equals("agreementImage")) {
          return getAgreementImage();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("agreementItem")) {
          return getAgreementItem();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("agreement")) {
          agent.target.setAgreement((Agreement) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("agreementItemTy")) {
          agent.target.setAgreementItemTy((Agreementitemtype) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("agreementDt")) {
          agent.target.setAgreementDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("agreementText")) {
          agent.target.setAgreementText((BigDecimal) value);
          return;
        }
        if (property.equals("agreementImage")) {
          agent.target.setAgreementImage((BigDecimal) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("agreementItem")) {
          agent.target.setAgreementItem((Agreementitem) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementitem) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementitem.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementitemProxy((Agreementitem) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementitemProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy extends Contactmechanismtype implements BindableProxy {
      private BindableProxyAgent<Contactmechanismtype> agent;
      public com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy() {
        this(new Contactmechanismtype());
      }

      public com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy(Contactmechanismtype target) {
        agent = new BindableProxyAgent<Contactmechanismtype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Contactmechanismtype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Contactmechanismtype unwrap() {
        return agent.target;
      }

      public Contactmechanismtype deepUnwrap() {
        final Contactmechanismtype clone = new Contactmechanismtype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Contactmechanismtype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Contactmechanismtype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy((Contactmechanismtype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ContactmechanismtypeProxy();
      }
    });
    class org_jboss_errai_ui_shared_api_LocaleProxy extends Locale implements BindableProxy {
      private BindableProxyAgent<Locale> agent;
      public org_jboss_errai_ui_shared_api_LocaleProxy() {
        this(new Locale());
      }

      public org_jboss_errai_ui_shared_api_LocaleProxy(Locale target) {
        agent = new BindableProxyAgent<Locale>(this, target);
        agent.propertyTypes.put("label", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("locale", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Locale.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Locale unwrap() {
        return agent.target;
      }

      public Locale deepUnwrap() {
        final Locale clone = new Locale();
        clone.setLabel(agent.target.getLabel());
        clone.setLocale(agent.target.getLocale());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof org_jboss_errai_ui_shared_api_LocaleProxy) {
          obj = ((org_jboss_errai_ui_shared_api_LocaleProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLabel() {
        return agent.target.getLabel();
      }

      public void setLabel(String label) {
        String oldValue = agent.target.getLabel();
        agent.target.setLabel(label);
        agent.updateWidgetsAndFireEvent(false, "label", oldValue, label);
      }

      public String getLocale() {
        return agent.target.getLocale();
      }

      public void setLocale(String locale) {
        String oldValue = agent.target.getLocale();
        agent.target.setLocale(locale);
        agent.updateWidgetsAndFireEvent(false, "locale", oldValue, locale);
      }

      public Object get(String property) {
        if (property.equals("label")) {
          return getLabel();
        }
        if (property.equals("locale")) {
          return getLocale();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("label")) {
          agent.target.setLabel((String) value);
          return;
        }
        if (property.equals("locale")) {
          agent.target.setLocale((String) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Locale) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Locale.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new org_jboss_errai_ui_shared_api_LocaleProxy((Locale) model);
      }
      public BindableProxy getBindableProxy() {
        return new org_jboss_errai_ui_shared_api_LocaleProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AccountingtransactionProxy extends Accountingtransaction implements BindableProxy {
      private BindableProxyAgent<Accountingtransaction> agent;
      public com_cloderia_helion_client_shared_model_AccountingtransactionProxy() {
        this(new Accountingtransaction());
      }

      public com_cloderia_helion_client_shared_model_AccountingtransactionProxy(Accountingtransaction target) {
        agent = new BindableProxyAgent<Accountingtransaction>(this, target);
        agent.propertyTypes.put("entryDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromParty", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("transactionTy", new PropertyType(Accountingtransactiontype.class, true, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("partyRole", new PropertyType(Partyrole.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("fixedAsset", new PropertyType(Fixedasset.class, true, false));
        agent.propertyTypes.put("transactionDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("toParty", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("payment", new PropertyType(Payment.class, true, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("invoice", new PropertyType(Invoice.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Accountingtransaction.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Accountingtransaction unwrap() {
        return agent.target;
      }

      public Accountingtransaction deepUnwrap() {
        final Accountingtransaction clone = new Accountingtransaction();
        clone.setEntryDt(agent.target.getEntryDt());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getFromParty() instanceof BindableProxy) {
          clone.setFromParty((Party) ((BindableProxy) getFromParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFromParty())) {
          clone.setFromParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFromParty())).deepUnwrap());
        } else {
          clone.setFromParty(agent.target.getFromParty());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getTransactionTy() instanceof BindableProxy) {
          clone.setTransactionTy((Accountingtransactiontype) ((BindableProxy) getTransactionTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTransactionTy())) {
          clone.setTransactionTy((Accountingtransactiontype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTransactionTy())).deepUnwrap());
        } else {
          clone.setTransactionTy(agent.target.getTransactionTy());
        }
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getPartyRole() instanceof BindableProxy) {
          clone.setPartyRole((Partyrole) ((BindableProxy) getPartyRole()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyRole())) {
          clone.setPartyRole((Partyrole) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyRole())).deepUnwrap());
        } else {
          clone.setPartyRole(agent.target.getPartyRole());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        if (agent.target.getFixedAsset() instanceof BindableProxy) {
          clone.setFixedAsset((Fixedasset) ((BindableProxy) getFixedAsset()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFixedAsset())) {
          clone.setFixedAsset((Fixedasset) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFixedAsset())).deepUnwrap());
        } else {
          clone.setFixedAsset(agent.target.getFixedAsset());
        }
        clone.setTransactionDt(agent.target.getTransactionDt());
        if (agent.target.getToParty() instanceof BindableProxy) {
          clone.setToParty((Party) ((BindableProxy) getToParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToParty())) {
          clone.setToParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToParty())).deepUnwrap());
        } else {
          clone.setToParty(agent.target.getToParty());
        }
        if (agent.target.getPayment() instanceof BindableProxy) {
          clone.setPayment((Payment) ((BindableProxy) getPayment()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPayment())) {
          clone.setPayment((Payment) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPayment())).deepUnwrap());
        } else {
          clone.setPayment(agent.target.getPayment());
        }
        clone.setId(agent.target.getId());
        if (agent.target.getInvoice() instanceof BindableProxy) {
          clone.setInvoice((Invoice) ((BindableProxy) getInvoice()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoice())) {
          clone.setInvoice((Invoice) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoice())).deepUnwrap());
        } else {
          clone.setInvoice(agent.target.getInvoice());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AccountingtransactionProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AccountingtransactionProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Date getEntryDt() {
        return agent.target.getEntryDt();
      }

      public void setEntryDt(Date entryDt) {
        Date oldValue = agent.target.getEntryDt();
        agent.target.setEntryDt(entryDt);
        agent.updateWidgetsAndFireEvent(false, "entryDt", oldValue, entryDt);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Party getFromParty() {
        return agent.target.getFromParty();
      }

      public void setFromParty(Party fromParty) {
        if (agent.binders.containsKey("fromParty")) {
          fromParty = (Party) agent.binders.get("fromParty").setModel(fromParty, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getFromParty();
        agent.target.setFromParty(fromParty);
        agent.updateWidgetsAndFireEvent(false, "fromParty", oldValue, fromParty);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Accountingtransactiontype getTransactionTy() {
        return agent.target.getTransactionTy();
      }

      public void setTransactionTy(Accountingtransactiontype transactionTy) {
        if (agent.binders.containsKey("transactionTy")) {
          transactionTy = (Accountingtransactiontype) agent.binders.get("transactionTy").setModel(transactionTy, StateSync.FROM_MODEL, true);
        }
        Accountingtransactiontype oldValue = agent.target.getTransactionTy();
        agent.target.setTransactionTy(transactionTy);
        agent.updateWidgetsAndFireEvent(false, "transactionTy", oldValue, transactionTy);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Partyrole getPartyRole() {
        return agent.target.getPartyRole();
      }

      public void setPartyRole(Partyrole partyRole) {
        if (agent.binders.containsKey("partyRole")) {
          partyRole = (Partyrole) agent.binders.get("partyRole").setModel(partyRole, StateSync.FROM_MODEL, true);
        }
        Partyrole oldValue = agent.target.getPartyRole();
        agent.target.setPartyRole(partyRole);
        agent.updateWidgetsAndFireEvent(false, "partyRole", oldValue, partyRole);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Fixedasset getFixedAsset() {
        return agent.target.getFixedAsset();
      }

      public void setFixedAsset(Fixedasset fixedAsset) {
        if (agent.binders.containsKey("fixedAsset")) {
          fixedAsset = (Fixedasset) agent.binders.get("fixedAsset").setModel(fixedAsset, StateSync.FROM_MODEL, true);
        }
        Fixedasset oldValue = agent.target.getFixedAsset();
        agent.target.setFixedAsset(fixedAsset);
        agent.updateWidgetsAndFireEvent(false, "fixedAsset", oldValue, fixedAsset);
      }

      public Date getTransactionDt() {
        return agent.target.getTransactionDt();
      }

      public void setTransactionDt(Date transactionDt) {
        Date oldValue = agent.target.getTransactionDt();
        agent.target.setTransactionDt(transactionDt);
        agent.updateWidgetsAndFireEvent(false, "transactionDt", oldValue, transactionDt);
      }

      public Party getToParty() {
        return agent.target.getToParty();
      }

      public void setToParty(Party toParty) {
        if (agent.binders.containsKey("toParty")) {
          toParty = (Party) agent.binders.get("toParty").setModel(toParty, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getToParty();
        agent.target.setToParty(toParty);
        agent.updateWidgetsAndFireEvent(false, "toParty", oldValue, toParty);
      }

      public Payment getPayment() {
        return agent.target.getPayment();
      }

      public void setPayment(Payment payment) {
        if (agent.binders.containsKey("payment")) {
          payment = (Payment) agent.binders.get("payment").setModel(payment, StateSync.FROM_MODEL, true);
        }
        Payment oldValue = agent.target.getPayment();
        agent.target.setPayment(payment);
        agent.updateWidgetsAndFireEvent(false, "payment", oldValue, payment);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Invoice getInvoice() {
        return agent.target.getInvoice();
      }

      public void setInvoice(Invoice invoice) {
        if (agent.binders.containsKey("invoice")) {
          invoice = (Invoice) agent.binders.get("invoice").setModel(invoice, StateSync.FROM_MODEL, true);
        }
        Invoice oldValue = agent.target.getInvoice();
        agent.target.setInvoice(invoice);
        agent.updateWidgetsAndFireEvent(false, "invoice", oldValue, invoice);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("entryDt")) {
          return getEntryDt();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fromParty")) {
          return getFromParty();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("transactionTy")) {
          return getTransactionTy();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("partyRole")) {
          return getPartyRole();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("fixedAsset")) {
          return getFixedAsset();
        }
        if (property.equals("transactionDt")) {
          return getTransactionDt();
        }
        if (property.equals("toParty")) {
          return getToParty();
        }
        if (property.equals("payment")) {
          return getPayment();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("invoice")) {
          return getInvoice();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("entryDt")) {
          agent.target.setEntryDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fromParty")) {
          agent.target.setFromParty((Party) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("transactionTy")) {
          agent.target.setTransactionTy((Accountingtransactiontype) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("partyRole")) {
          agent.target.setPartyRole((Partyrole) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("fixedAsset")) {
          agent.target.setFixedAsset((Fixedasset) value);
          return;
        }
        if (property.equals("transactionDt")) {
          agent.target.setTransactionDt((Date) value);
          return;
        }
        if (property.equals("toParty")) {
          agent.target.setToParty((Party) value);
          return;
        }
        if (property.equals("payment")) {
          agent.target.setPayment((Payment) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("invoice")) {
          agent.target.setInvoice((Invoice) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Accountingtransaction) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Accountingtransaction.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AccountingtransactionProxy((Accountingtransaction) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AccountingtransactionProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgetstatusProxy extends Budgetstatus implements BindableProxy {
      private BindableProxyAgent<Budgetstatus> agent;
      public com_cloderia_helion_client_shared_model_BudgetstatusProxy() {
        this(new Budgetstatus());
      }

      public com_cloderia_helion_client_shared_model_BudgetstatusProxy(Budgetstatus target) {
        agent = new BindableProxyAgent<Budgetstatus>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("statusTy", new PropertyType(Budgetstatustype.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("comment", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("statusDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("budget", new PropertyType(Budget.class, true, false));
        agent.propertyTypes.put("this", new PropertyType(Budgetstatus.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budgetstatus unwrap() {
        return agent.target;
      }

      public Budgetstatus deepUnwrap() {
        final Budgetstatus clone = new Budgetstatus();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getStatusTy() instanceof BindableProxy) {
          clone.setStatusTy((Budgetstatustype) ((BindableProxy) getStatusTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getStatusTy())) {
          clone.setStatusTy((Budgetstatustype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getStatusTy())).deepUnwrap());
        } else {
          clone.setStatusTy(agent.target.getStatusTy());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setComment(agent.target.getComment());
        clone.setId(agent.target.getId());
        clone.setStatusDt(agent.target.getStatusDt());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        if (agent.target.getBudget() instanceof BindableProxy) {
          clone.setBudget((Budget) ((BindableProxy) getBudget()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getBudget())) {
          clone.setBudget((Budget) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getBudget())).deepUnwrap());
        } else {
          clone.setBudget(agent.target.getBudget());
        }
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgetstatusProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgetstatusProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Budgetstatustype getStatusTy() {
        return agent.target.getStatusTy();
      }

      public void setStatusTy(Budgetstatustype statusTy) {
        if (agent.binders.containsKey("statusTy")) {
          statusTy = (Budgetstatustype) agent.binders.get("statusTy").setModel(statusTy, StateSync.FROM_MODEL, true);
        }
        Budgetstatustype oldValue = agent.target.getStatusTy();
        agent.target.setStatusTy(statusTy);
        agent.updateWidgetsAndFireEvent(false, "statusTy", oldValue, statusTy);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public String getComment() {
        return agent.target.getComment();
      }

      public void setComment(String comment) {
        String oldValue = agent.target.getComment();
        agent.target.setComment(comment);
        agent.updateWidgetsAndFireEvent(false, "comment", oldValue, comment);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Date getStatusDt() {
        return agent.target.getStatusDt();
      }

      public void setStatusDt(Date statusDt) {
        Date oldValue = agent.target.getStatusDt();
        agent.target.setStatusDt(statusDt);
        agent.updateWidgetsAndFireEvent(false, "statusDt", oldValue, statusDt);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Budget getBudget() {
        return agent.target.getBudget();
      }

      public void setBudget(Budget budget) {
        if (agent.binders.containsKey("budget")) {
          budget = (Budget) agent.binders.get("budget").setModel(budget, StateSync.FROM_MODEL, true);
        }
        Budget oldValue = agent.target.getBudget();
        agent.target.setBudget(budget);
        agent.updateWidgetsAndFireEvent(false, "budget", oldValue, budget);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("statusTy")) {
          return getStatusTy();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("comment")) {
          return getComment();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("statusDt")) {
          return getStatusDt();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("budget")) {
          return getBudget();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("statusTy")) {
          agent.target.setStatusTy((Budgetstatustype) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("comment")) {
          agent.target.setComment((String) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("statusDt")) {
          agent.target.setStatusDt((Date) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("budget")) {
          agent.target.setBudget((Budget) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budgetstatus) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budgetstatus.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgetstatusProxy((Budgetstatus) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgetstatusProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_SupplierproductProxy extends Supplierproduct implements BindableProxy {
      private BindableProxyAgent<Supplierproduct> agent;
      public com_cloderia_helion_client_shared_model_SupplierproductProxy() {
        this(new Supplierproduct());
      }

      public com_cloderia_helion_client_shared_model_SupplierproductProxy(Supplierproduct target) {
        agent = new BindableProxyAgent<Supplierproduct>(this, target);
        agent.propertyTypes.put("availToDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("prod", new PropertyType(Product.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("rating", new PropertyType(Ratingtype.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("availFromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("pref", new PropertyType(Preferencetype.class, true, false));
        agent.propertyTypes.put("supplier", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("remarks", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Supplierproduct.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Supplierproduct unwrap() {
        return agent.target;
      }

      public Supplierproduct deepUnwrap() {
        final Supplierproduct clone = new Supplierproduct();
        clone.setAvailToDt(agent.target.getAvailToDt());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getProd() instanceof BindableProxy) {
          clone.setProd((Product) ((BindableProxy) getProd()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProd())) {
          clone.setProd((Product) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProd())).deepUnwrap());
        } else {
          clone.setProd(agent.target.getProd());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getRating() instanceof BindableProxy) {
          clone.setRating((Ratingtype) ((BindableProxy) getRating()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getRating())) {
          clone.setRating((Ratingtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getRating())).deepUnwrap());
        } else {
          clone.setRating(agent.target.getRating());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        clone.setAvailFromDt(agent.target.getAvailFromDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getPref() instanceof BindableProxy) {
          clone.setPref((Preferencetype) ((BindableProxy) getPref()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPref())) {
          clone.setPref((Preferencetype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPref())).deepUnwrap());
        } else {
          clone.setPref(agent.target.getPref());
        }
        if (agent.target.getSupplier() instanceof BindableProxy) {
          clone.setSupplier((Party) ((BindableProxy) getSupplier()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getSupplier())) {
          clone.setSupplier((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getSupplier())).deepUnwrap());
        } else {
          clone.setSupplier(agent.target.getSupplier());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setRemarks(agent.target.getRemarks());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_SupplierproductProxy) {
          obj = ((com_cloderia_helion_client_shared_model_SupplierproductProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Date getAvailToDt() {
        return agent.target.getAvailToDt();
      }

      public void setAvailToDt(Date availToDt) {
        Date oldValue = agent.target.getAvailToDt();
        agent.target.setAvailToDt(availToDt);
        agent.updateWidgetsAndFireEvent(false, "availToDt", oldValue, availToDt);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Product getProd() {
        return agent.target.getProd();
      }

      public void setProd(Product prod) {
        if (agent.binders.containsKey("prod")) {
          prod = (Product) agent.binders.get("prod").setModel(prod, StateSync.FROM_MODEL, true);
        }
        Product oldValue = agent.target.getProd();
        agent.target.setProd(prod);
        agent.updateWidgetsAndFireEvent(false, "prod", oldValue, prod);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Ratingtype getRating() {
        return agent.target.getRating();
      }

      public void setRating(Ratingtype rating) {
        if (agent.binders.containsKey("rating")) {
          rating = (Ratingtype) agent.binders.get("rating").setModel(rating, StateSync.FROM_MODEL, true);
        }
        Ratingtype oldValue = agent.target.getRating();
        agent.target.setRating(rating);
        agent.updateWidgetsAndFireEvent(false, "rating", oldValue, rating);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Date getAvailFromDt() {
        return agent.target.getAvailFromDt();
      }

      public void setAvailFromDt(Date availFromDt) {
        Date oldValue = agent.target.getAvailFromDt();
        agent.target.setAvailFromDt(availFromDt);
        agent.updateWidgetsAndFireEvent(false, "availFromDt", oldValue, availFromDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Preferencetype getPref() {
        return agent.target.getPref();
      }

      public void setPref(Preferencetype pref) {
        if (agent.binders.containsKey("pref")) {
          pref = (Preferencetype) agent.binders.get("pref").setModel(pref, StateSync.FROM_MODEL, true);
        }
        Preferencetype oldValue = agent.target.getPref();
        agent.target.setPref(pref);
        agent.updateWidgetsAndFireEvent(false, "pref", oldValue, pref);
      }

      public Party getSupplier() {
        return agent.target.getSupplier();
      }

      public void setSupplier(Party supplier) {
        if (agent.binders.containsKey("supplier")) {
          supplier = (Party) agent.binders.get("supplier").setModel(supplier, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getSupplier();
        agent.target.setSupplier(supplier);
        agent.updateWidgetsAndFireEvent(false, "supplier", oldValue, supplier);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public String getRemarks() {
        return agent.target.getRemarks();
      }

      public void setRemarks(String remarks) {
        String oldValue = agent.target.getRemarks();
        agent.target.setRemarks(remarks);
        agent.updateWidgetsAndFireEvent(false, "remarks", oldValue, remarks);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("availToDt")) {
          return getAvailToDt();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("prod")) {
          return getProd();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("rating")) {
          return getRating();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("availFromDt")) {
          return getAvailFromDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("pref")) {
          return getPref();
        }
        if (property.equals("supplier")) {
          return getSupplier();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("remarks")) {
          return getRemarks();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("availToDt")) {
          agent.target.setAvailToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("prod")) {
          agent.target.setProd((Product) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("rating")) {
          agent.target.setRating((Ratingtype) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("availFromDt")) {
          agent.target.setAvailFromDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("pref")) {
          agent.target.setPref((Preferencetype) value);
          return;
        }
        if (property.equals("supplier")) {
          agent.target.setSupplier((Party) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("remarks")) {
          agent.target.setRemarks((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Supplierproduct) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Supplierproduct.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_SupplierproductProxy((Supplierproduct) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_SupplierproductProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AccountingperiodProxy extends Accountingperiod implements BindableProxy {
      private BindableProxyAgent<Accountingperiod> agent;
      public com_cloderia_helion_client_shared_model_AccountingperiodProxy() {
        this(new Accountingperiod());
      }

      public com_cloderia_helion_client_shared_model_AccountingperiodProxy(Accountingperiod target) {
        agent = new BindableProxyAgent<Accountingperiod>(this, target);
        agent.propertyTypes.put("periodNum", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("organization", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("periodTy", new PropertyType(Periodtype.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("parentPeriodTy", new PropertyType(Accountingperiod.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Accountingperiod.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Accountingperiod unwrap() {
        return agent.target;
      }

      public Accountingperiod deepUnwrap() {
        final Accountingperiod clone = new Accountingperiod();
        clone.setPeriodNum(agent.target.getPeriodNum());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getOrganization() instanceof BindableProxy) {
          clone.setOrganization((Party) ((BindableProxy) getOrganization()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getOrganization())) {
          clone.setOrganization((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getOrganization())).deepUnwrap());
        } else {
          clone.setOrganization(agent.target.getOrganization());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getPeriodTy() instanceof BindableProxy) {
          clone.setPeriodTy((Periodtype) ((BindableProxy) getPeriodTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPeriodTy())) {
          clone.setPeriodTy((Periodtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPeriodTy())).deepUnwrap());
        } else {
          clone.setPeriodTy(agent.target.getPeriodTy());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParentPeriodTy() instanceof BindableProxy) {
          clone.setParentPeriodTy((Accountingperiod) ((BindableProxy) getParentPeriodTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentPeriodTy())) {
          clone.setParentPeriodTy((Accountingperiod) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentPeriodTy())).deepUnwrap());
        } else {
          clone.setParentPeriodTy(agent.target.getParentPeriodTy());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AccountingperiodProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AccountingperiodProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Integer getPeriodNum() {
        return agent.target.getPeriodNum();
      }

      public void setPeriodNum(Integer periodNum) {
        Integer oldValue = agent.target.getPeriodNum();
        agent.target.setPeriodNum(periodNum);
        agent.updateWidgetsAndFireEvent(false, "periodNum", oldValue, periodNum);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Party getOrganization() {
        return agent.target.getOrganization();
      }

      public void setOrganization(Party organization) {
        if (agent.binders.containsKey("organization")) {
          organization = (Party) agent.binders.get("organization").setModel(organization, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getOrganization();
        agent.target.setOrganization(organization);
        agent.updateWidgetsAndFireEvent(false, "organization", oldValue, organization);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Periodtype getPeriodTy() {
        return agent.target.getPeriodTy();
      }

      public void setPeriodTy(Periodtype periodTy) {
        if (agent.binders.containsKey("periodTy")) {
          periodTy = (Periodtype) agent.binders.get("periodTy").setModel(periodTy, StateSync.FROM_MODEL, true);
        }
        Periodtype oldValue = agent.target.getPeriodTy();
        agent.target.setPeriodTy(periodTy);
        agent.updateWidgetsAndFireEvent(false, "periodTy", oldValue, periodTy);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Accountingperiod getParentPeriodTy() {
        return agent.target.getParentPeriodTy();
      }

      public void setParentPeriodTy(Accountingperiod parentPeriodTy) {
        if (agent.binders.containsKey("parentPeriodTy")) {
          parentPeriodTy = (Accountingperiod) agent.binders.get("parentPeriodTy").setModel(parentPeriodTy, StateSync.FROM_MODEL, true);
        }
        Accountingperiod oldValue = agent.target.getParentPeriodTy();
        agent.target.setParentPeriodTy(parentPeriodTy);
        agent.updateWidgetsAndFireEvent(false, "parentPeriodTy", oldValue, parentPeriodTy);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("periodNum")) {
          return getPeriodNum();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("organization")) {
          return getOrganization();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("periodTy")) {
          return getPeriodTy();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("parentPeriodTy")) {
          return getParentPeriodTy();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("periodNum")) {
          agent.target.setPeriodNum((Integer) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("organization")) {
          agent.target.setOrganization((Party) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("periodTy")) {
          agent.target.setPeriodTy((Periodtype) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("parentPeriodTy")) {
          agent.target.setParentPeriodTy((Accountingperiod) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Accountingperiod) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Accountingperiod.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AccountingperiodProxy((Accountingperiod) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AccountingperiodProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_TerminationreasonProxy extends Terminationreason implements BindableProxy {
      private BindableProxyAgent<Terminationreason> agent;
      public com_cloderia_helion_client_shared_model_TerminationreasonProxy() {
        this(new Terminationreason());
      }

      public com_cloderia_helion_client_shared_model_TerminationreasonProxy(Terminationreason target) {
        agent = new BindableProxyAgent<Terminationreason>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Terminationreason.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Terminationreason unwrap() {
        return agent.target;
      }

      public Terminationreason deepUnwrap() {
        final Terminationreason clone = new Terminationreason();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_TerminationreasonProxy) {
          obj = ((com_cloderia_helion_client_shared_model_TerminationreasonProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Terminationreason) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Terminationreason.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_TerminationreasonProxy((Terminationreason) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_TerminationreasonProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FixedassettypeProxy extends Fixedassettype implements BindableProxy {
      private BindableProxyAgent<Fixedassettype> agent;
      public com_cloderia_helion_client_shared_model_FixedassettypeProxy() {
        this(new Fixedassettype());
      }

      public com_cloderia_helion_client_shared_model_FixedassettypeProxy(Fixedassettype target) {
        agent = new BindableProxyAgent<Fixedassettype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("parentTy", new PropertyType(Fixedassettype.class, true, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Fixedassettype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Fixedassettype unwrap() {
        return agent.target;
      }

      public Fixedassettype deepUnwrap() {
        final Fixedassettype clone = new Fixedassettype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        if (agent.target.getParentTy() instanceof BindableProxy) {
          clone.setParentTy((Fixedassettype) ((BindableProxy) getParentTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentTy())) {
          clone.setParentTy((Fixedassettype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentTy())).deepUnwrap());
        } else {
          clone.setParentTy(agent.target.getParentTy());
        }
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FixedassettypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FixedassettypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Fixedassettype getParentTy() {
        return agent.target.getParentTy();
      }

      public void setParentTy(Fixedassettype parentTy) {
        if (agent.binders.containsKey("parentTy")) {
          parentTy = (Fixedassettype) agent.binders.get("parentTy").setModel(parentTy, StateSync.FROM_MODEL, true);
        }
        Fixedassettype oldValue = agent.target.getParentTy();
        agent.target.setParentTy(parentTy);
        agent.updateWidgetsAndFireEvent(false, "parentTy", oldValue, parentTy);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("parentTy")) {
          return getParentTy();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("parentTy")) {
          agent.target.setParentTy((Fixedassettype) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Fixedassettype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Fixedassettype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FixedassettypeProxy((Fixedassettype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FixedassettypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoicestatustypeProxy extends Invoicestatustype implements BindableProxy {
      private BindableProxyAgent<Invoicestatustype> agent;
      public com_cloderia_helion_client_shared_model_InvoicestatustypeProxy() {
        this(new Invoicestatustype());
      }

      public com_cloderia_helion_client_shared_model_InvoicestatustypeProxy(Invoicestatustype target) {
        agent = new BindableProxyAgent<Invoicestatustype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoicestatustype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoicestatustype unwrap() {
        return agent.target;
      }

      public Invoicestatustype deepUnwrap() {
        final Invoicestatustype clone = new Invoicestatustype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoicestatustypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoicestatustypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoicestatustype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoicestatustype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoicestatustypeProxy((Invoicestatustype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoicestatustypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_ProductcategoryProxy extends Productcategory implements BindableProxy {
      private BindableProxyAgent<Productcategory> agent;
      public com_cloderia_helion_client_shared_model_ProductcategoryProxy() {
        this(new Productcategory());
      }

      public com_cloderia_helion_client_shared_model_ProductcategoryProxy(Productcategory target) {
        agent = new BindableProxyAgent<Productcategory>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("prodCatTy", new PropertyType(Productcategorytype.class, true, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Productcategory.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Productcategory unwrap() {
        return agent.target;
      }

      public Productcategory deepUnwrap() {
        final Productcategory clone = new Productcategory();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getProdCatTy() instanceof BindableProxy) {
          clone.setProdCatTy((Productcategorytype) ((BindableProxy) getProdCatTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProdCatTy())) {
          clone.setProdCatTy((Productcategorytype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProdCatTy())).deepUnwrap());
        } else {
          clone.setProdCatTy(agent.target.getProdCatTy());
        }
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_ProductcategoryProxy) {
          obj = ((com_cloderia_helion_client_shared_model_ProductcategoryProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Productcategorytype getProdCatTy() {
        return agent.target.getProdCatTy();
      }

      public void setProdCatTy(Productcategorytype prodCatTy) {
        if (agent.binders.containsKey("prodCatTy")) {
          prodCatTy = (Productcategorytype) agent.binders.get("prodCatTy").setModel(prodCatTy, StateSync.FROM_MODEL, true);
        }
        Productcategorytype oldValue = agent.target.getProdCatTy();
        agent.target.setProdCatTy(prodCatTy);
        agent.updateWidgetsAndFireEvent(false, "prodCatTy", oldValue, prodCatTy);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("prodCatTy")) {
          return getProdCatTy();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("prodCatTy")) {
          agent.target.setProdCatTy((Productcategorytype) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Productcategory) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Productcategory.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_ProductcategoryProxy((Productcategory) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_ProductcategoryProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementtermProxy extends Agreementterm implements BindableProxy {
      private BindableProxyAgent<Agreementterm> agent;
      public com_cloderia_helion_client_shared_model_AgreementtermProxy() {
        this(new Agreementterm());
      }

      public com_cloderia_helion_client_shared_model_AgreementtermProxy(Agreementterm target) {
        agent = new BindableProxyAgent<Agreementterm>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("agreement", new PropertyType(Agreement.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("termTy", new PropertyType(Termtype.class, true, false));
        agent.propertyTypes.put("termValue", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("agreementItem", new PropertyType(Agreementitem.class, true, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementterm.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementterm unwrap() {
        return agent.target;
      }

      public Agreementterm deepUnwrap() {
        final Agreementterm clone = new Agreementterm();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getAgreement() instanceof BindableProxy) {
          clone.setAgreement((Agreement) ((BindableProxy) getAgreement()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreement())) {
          clone.setAgreement((Agreement) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreement())).deepUnwrap());
        } else {
          clone.setAgreement(agent.target.getAgreement());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getTermTy() instanceof BindableProxy) {
          clone.setTermTy((Termtype) ((BindableProxy) getTermTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTermTy())) {
          clone.setTermTy((Termtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTermTy())).deepUnwrap());
        } else {
          clone.setTermTy(agent.target.getTermTy());
        }
        clone.setTermValue(agent.target.getTermValue());
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getAgreementItem() instanceof BindableProxy) {
          clone.setAgreementItem((Agreementitem) ((BindableProxy) getAgreementItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreementItem())) {
          clone.setAgreementItem((Agreementitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreementItem())).deepUnwrap());
        } else {
          clone.setAgreementItem(agent.target.getAgreementItem());
        }
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementtermProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementtermProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Agreement getAgreement() {
        return agent.target.getAgreement();
      }

      public void setAgreement(Agreement agreement) {
        if (agent.binders.containsKey("agreement")) {
          agreement = (Agreement) agent.binders.get("agreement").setModel(agreement, StateSync.FROM_MODEL, true);
        }
        Agreement oldValue = agent.target.getAgreement();
        agent.target.setAgreement(agreement);
        agent.updateWidgetsAndFireEvent(false, "agreement", oldValue, agreement);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Termtype getTermTy() {
        return agent.target.getTermTy();
      }

      public void setTermTy(Termtype termTy) {
        if (agent.binders.containsKey("termTy")) {
          termTy = (Termtype) agent.binders.get("termTy").setModel(termTy, StateSync.FROM_MODEL, true);
        }
        Termtype oldValue = agent.target.getTermTy();
        agent.target.setTermTy(termTy);
        agent.updateWidgetsAndFireEvent(false, "termTy", oldValue, termTy);
      }

      public Integer getTermValue() {
        return agent.target.getTermValue();
      }

      public void setTermValue(Integer termValue) {
        Integer oldValue = agent.target.getTermValue();
        agent.target.setTermValue(termValue);
        agent.updateWidgetsAndFireEvent(false, "termValue", oldValue, termValue);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Agreementitem getAgreementItem() {
        return agent.target.getAgreementItem();
      }

      public void setAgreementItem(Agreementitem agreementItem) {
        if (agent.binders.containsKey("agreementItem")) {
          agreementItem = (Agreementitem) agent.binders.get("agreementItem").setModel(agreementItem, StateSync.FROM_MODEL, true);
        }
        Agreementitem oldValue = agent.target.getAgreementItem();
        agent.target.setAgreementItem(agreementItem);
        agent.updateWidgetsAndFireEvent(false, "agreementItem", oldValue, agreementItem);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("agreement")) {
          return getAgreement();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("termTy")) {
          return getTermTy();
        }
        if (property.equals("termValue")) {
          return getTermValue();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("agreementItem")) {
          return getAgreementItem();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("agreement")) {
          agent.target.setAgreement((Agreement) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("termTy")) {
          agent.target.setTermTy((Termtype) value);
          return;
        }
        if (property.equals("termValue")) {
          agent.target.setTermValue((Integer) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("agreementItem")) {
          agent.target.setAgreementItem((Agreementitem) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementterm) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementterm.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementtermProxy((Agreementterm) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementtermProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_UomProxy extends Uom implements BindableProxy {
      private BindableProxyAgent<Uom> agent;
      public com_cloderia_helion_client_shared_model_UomProxy() {
        this(new Uom());
      }

      public com_cloderia_helion_client_shared_model_UomProxy(Uom target) {
        agent = new BindableProxyAgent<Uom>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Uom.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Uom unwrap() {
        return agent.target;
      }

      public Uom deepUnwrap() {
        final Uom clone = new Uom();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_UomProxy) {
          obj = ((com_cloderia_helion_client_shared_model_UomProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Uom) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Uom.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_UomProxy((Uom) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_UomProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartycategoryProxy extends Partycategory implements BindableProxy {
      private BindableProxyAgent<Partycategory> agent;
      public com_cloderia_helion_client_shared_model_PartycategoryProxy() {
        this(new Partycategory());
      }

      public com_cloderia_helion_client_shared_model_PartycategoryProxy(Partycategory target) {
        agent = new BindableProxyAgent<Partycategory>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partycategory.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partycategory unwrap() {
        return agent.target;
      }

      public Partycategory deepUnwrap() {
        final Partycategory clone = new Partycategory();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartycategoryProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartycategoryProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partycategory) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partycategory.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartycategoryProxy((Partycategory) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartycategoryProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_SystemuserProxy extends Systemuser implements BindableProxy {
      private BindableProxyAgent<Systemuser> agent;
      public com_cloderia_helion_client_shared_model_SystemuserProxy() {
        this(new Systemuser());
      }

      public com_cloderia_helion_client_shared_model_SystemuserProxy(Systemuser target) {
        agent = new BindableProxyAgent<Systemuser>(this, target);
        agent.propertyTypes.put("userNm", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("password", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastLoginDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lockedFg", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Systemuser.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Systemuser unwrap() {
        return agent.target;
      }

      public Systemuser deepUnwrap() {
        final Systemuser clone = new Systemuser();
        clone.setUserNm(agent.target.getUserNm());
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setPassword(agent.target.getPassword());
        clone.setCreatedDt(agent.target.getCreatedDt());
        clone.setLastLoginDt(agent.target.getLastLoginDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLockedFg(agent.target.getLockedFg());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_SystemuserProxy) {
          obj = ((com_cloderia_helion_client_shared_model_SystemuserProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getUserNm() {
        return agent.target.getUserNm();
      }

      public void setUserNm(String userNm) {
        String oldValue = agent.target.getUserNm();
        agent.target.setUserNm(userNm);
        agent.updateWidgetsAndFireEvent(false, "userNm", oldValue, userNm);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getPassword() {
        return agent.target.getPassword();
      }

      public void setPassword(String password) {
        String oldValue = agent.target.getPassword();
        agent.target.setPassword(password);
        agent.updateWidgetsAndFireEvent(false, "password", oldValue, password);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Date getLastLoginDt() {
        return agent.target.getLastLoginDt();
      }

      public void setLastLoginDt(Date lastLoginDt) {
        Date oldValue = agent.target.getLastLoginDt();
        agent.target.setLastLoginDt(lastLoginDt);
        agent.updateWidgetsAndFireEvent(false, "lastLoginDt", oldValue, lastLoginDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public String getLockedFg() {
        return agent.target.getLockedFg();
      }

      public void setLockedFg(String lockedFg) {
        String oldValue = agent.target.getLockedFg();
        agent.target.setLockedFg(lockedFg);
        agent.updateWidgetsAndFireEvent(false, "lockedFg", oldValue, lockedFg);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("userNm")) {
          return getUserNm();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("password")) {
          return getPassword();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("lastLoginDt")) {
          return getLastLoginDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lockedFg")) {
          return getLockedFg();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("userNm")) {
          agent.target.setUserNm((String) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("password")) {
          agent.target.setPassword((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("lastLoginDt")) {
          agent.target.setLastLoginDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lockedFg")) {
          agent.target.setLockedFg((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Systemuser) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Systemuser.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_SystemuserProxy((Systemuser) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_SystemuserProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoicestatusProxy extends Invoicestatus implements BindableProxy {
      private BindableProxyAgent<Invoicestatus> agent;
      public com_cloderia_helion_client_shared_model_InvoicestatusProxy() {
        this(new Invoicestatus());
      }

      public com_cloderia_helion_client_shared_model_InvoicestatusProxy(Invoicestatus target) {
        agent = new BindableProxyAgent<Invoicestatus>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("invoiceStatTy", new PropertyType(Invoicestatustype.class, true, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("invoice", new PropertyType(Invoice.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoicestatus.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoicestatus unwrap() {
        return agent.target;
      }

      public Invoicestatus deepUnwrap() {
        final Invoicestatus clone = new Invoicestatus();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        if (agent.target.getInvoiceStatTy() instanceof BindableProxy) {
          clone.setInvoiceStatTy((Invoicestatustype) ((BindableProxy) getInvoiceStatTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoiceStatTy())) {
          clone.setInvoiceStatTy((Invoicestatustype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoiceStatTy())).deepUnwrap());
        } else {
          clone.setInvoiceStatTy(agent.target.getInvoiceStatTy());
        }
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getInvoice() instanceof BindableProxy) {
          clone.setInvoice((Invoice) ((BindableProxy) getInvoice()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getInvoice())) {
          clone.setInvoice((Invoice) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getInvoice())).deepUnwrap());
        } else {
          clone.setInvoice(agent.target.getInvoice());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoicestatusProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoicestatusProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Invoicestatustype getInvoiceStatTy() {
        return agent.target.getInvoiceStatTy();
      }

      public void setInvoiceStatTy(Invoicestatustype invoiceStatTy) {
        if (agent.binders.containsKey("invoiceStatTy")) {
          invoiceStatTy = (Invoicestatustype) agent.binders.get("invoiceStatTy").setModel(invoiceStatTy, StateSync.FROM_MODEL, true);
        }
        Invoicestatustype oldValue = agent.target.getInvoiceStatTy();
        agent.target.setInvoiceStatTy(invoiceStatTy);
        agent.updateWidgetsAndFireEvent(false, "invoiceStatTy", oldValue, invoiceStatTy);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Invoice getInvoice() {
        return agent.target.getInvoice();
      }

      public void setInvoice(Invoice invoice) {
        if (agent.binders.containsKey("invoice")) {
          invoice = (Invoice) agent.binders.get("invoice").setModel(invoice, StateSync.FROM_MODEL, true);
        }
        Invoice oldValue = agent.target.getInvoice();
        agent.target.setInvoice(invoice);
        agent.updateWidgetsAndFireEvent(false, "invoice", oldValue, invoice);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("invoiceStatTy")) {
          return getInvoiceStatTy();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("invoice")) {
          return getInvoice();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("invoiceStatTy")) {
          agent.target.setInvoiceStatTy((Invoicestatustype) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("invoice")) {
          agent.target.setInvoice((Invoice) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoicestatus) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoicestatus.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoicestatusProxy((Invoicestatus) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoicestatusProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_DocumenttypeProxy extends Documenttype implements BindableProxy {
      private BindableProxyAgent<Documenttype> agent;
      public com_cloderia_helion_client_shared_model_DocumenttypeProxy() {
        this(new Documenttype());
      }

      public com_cloderia_helion_client_shared_model_DocumenttypeProxy(Documenttype target) {
        agent = new BindableProxyAgent<Documenttype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("parentTy", new PropertyType(Documenttype.class, true, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Documenttype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Documenttype unwrap() {
        return agent.target;
      }

      public Documenttype deepUnwrap() {
        final Documenttype clone = new Documenttype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        if (agent.target.getParentTy() instanceof BindableProxy) {
          clone.setParentTy((Documenttype) ((BindableProxy) getParentTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentTy())) {
          clone.setParentTy((Documenttype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentTy())).deepUnwrap());
        } else {
          clone.setParentTy(agent.target.getParentTy());
        }
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_DocumenttypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_DocumenttypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Documenttype getParentTy() {
        return agent.target.getParentTy();
      }

      public void setParentTy(Documenttype parentTy) {
        if (agent.binders.containsKey("parentTy")) {
          parentTy = (Documenttype) agent.binders.get("parentTy").setModel(parentTy, StateSync.FROM_MODEL, true);
        }
        Documenttype oldValue = agent.target.getParentTy();
        agent.target.setParentTy(parentTy);
        agent.updateWidgetsAndFireEvent(false, "parentTy", oldValue, parentTy);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("parentTy")) {
          return getParentTy();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("parentTy")) {
          agent.target.setParentTy((Documenttype) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Documenttype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Documenttype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_DocumenttypeProxy((Documenttype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_DocumenttypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy extends Organizationgeneralledgeraccount implements BindableProxy {
      private BindableProxyAgent<Organizationgeneralledgeraccount> agent;
      public com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy() {
        this(new Organizationgeneralledgeraccount());
      }

      public com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy(Organizationgeneralledgeraccount target) {
        agent = new BindableProxyAgent<Organizationgeneralledgeraccount>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("product", new PropertyType(Product.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("refParty", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("organization", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("productCat", new PropertyType(Productcategory.class, true, false));
        agent.propertyTypes.put("glAccount", new PropertyType(Generalledgeraccount.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Organizationgeneralledgeraccount.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Organizationgeneralledgeraccount unwrap() {
        return agent.target;
      }

      public Organizationgeneralledgeraccount deepUnwrap() {
        final Organizationgeneralledgeraccount clone = new Organizationgeneralledgeraccount();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getProduct() instanceof BindableProxy) {
          clone.setProduct((Product) ((BindableProxy) getProduct()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProduct())) {
          clone.setProduct((Product) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProduct())).deepUnwrap());
        } else {
          clone.setProduct(agent.target.getProduct());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getRefParty() instanceof BindableProxy) {
          clone.setRefParty((Party) ((BindableProxy) getRefParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getRefParty())) {
          clone.setRefParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getRefParty())).deepUnwrap());
        } else {
          clone.setRefParty(agent.target.getRefParty());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getOrganization() instanceof BindableProxy) {
          clone.setOrganization((Party) ((BindableProxy) getOrganization()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getOrganization())) {
          clone.setOrganization((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getOrganization())).deepUnwrap());
        } else {
          clone.setOrganization(agent.target.getOrganization());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getProductCat() instanceof BindableProxy) {
          clone.setProductCat((Productcategory) ((BindableProxy) getProductCat()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getProductCat())) {
          clone.setProductCat((Productcategory) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getProductCat())).deepUnwrap());
        } else {
          clone.setProductCat(agent.target.getProductCat());
        }
        if (agent.target.getGlAccount() instanceof BindableProxy) {
          clone.setGlAccount((Generalledgeraccount) ((BindableProxy) getGlAccount()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getGlAccount())) {
          clone.setGlAccount((Generalledgeraccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getGlAccount())).deepUnwrap());
        } else {
          clone.setGlAccount(agent.target.getGlAccount());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy) {
          obj = ((com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Product getProduct() {
        return agent.target.getProduct();
      }

      public void setProduct(Product product) {
        if (agent.binders.containsKey("product")) {
          product = (Product) agent.binders.get("product").setModel(product, StateSync.FROM_MODEL, true);
        }
        Product oldValue = agent.target.getProduct();
        agent.target.setProduct(product);
        agent.updateWidgetsAndFireEvent(false, "product", oldValue, product);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Party getRefParty() {
        return agent.target.getRefParty();
      }

      public void setRefParty(Party refParty) {
        if (agent.binders.containsKey("refParty")) {
          refParty = (Party) agent.binders.get("refParty").setModel(refParty, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getRefParty();
        agent.target.setRefParty(refParty);
        agent.updateWidgetsAndFireEvent(false, "refParty", oldValue, refParty);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Party getOrganization() {
        return agent.target.getOrganization();
      }

      public void setOrganization(Party organization) {
        if (agent.binders.containsKey("organization")) {
          organization = (Party) agent.binders.get("organization").setModel(organization, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getOrganization();
        agent.target.setOrganization(organization);
        agent.updateWidgetsAndFireEvent(false, "organization", oldValue, organization);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Productcategory getProductCat() {
        return agent.target.getProductCat();
      }

      public void setProductCat(Productcategory productCat) {
        if (agent.binders.containsKey("productCat")) {
          productCat = (Productcategory) agent.binders.get("productCat").setModel(productCat, StateSync.FROM_MODEL, true);
        }
        Productcategory oldValue = agent.target.getProductCat();
        agent.target.setProductCat(productCat);
        agent.updateWidgetsAndFireEvent(false, "productCat", oldValue, productCat);
      }

      public Generalledgeraccount getGlAccount() {
        return agent.target.getGlAccount();
      }

      public void setGlAccount(Generalledgeraccount glAccount) {
        if (agent.binders.containsKey("glAccount")) {
          glAccount = (Generalledgeraccount) agent.binders.get("glAccount").setModel(glAccount, StateSync.FROM_MODEL, true);
        }
        Generalledgeraccount oldValue = agent.target.getGlAccount();
        agent.target.setGlAccount(glAccount);
        agent.updateWidgetsAndFireEvent(false, "glAccount", oldValue, glAccount);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("product")) {
          return getProduct();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("refParty")) {
          return getRefParty();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("organization")) {
          return getOrganization();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("productCat")) {
          return getProductCat();
        }
        if (property.equals("glAccount")) {
          return getGlAccount();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("product")) {
          agent.target.setProduct((Product) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("refParty")) {
          agent.target.setRefParty((Party) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("organization")) {
          agent.target.setOrganization((Party) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("productCat")) {
          agent.target.setProductCat((Productcategory) value);
          return;
        }
        if (property.equals("glAccount")) {
          agent.target.setGlAccount((Generalledgeraccount) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Organizationgeneralledgeraccount) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Organizationgeneralledgeraccount.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy((Organizationgeneralledgeraccount) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_OrganizationgeneralledgeraccountProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InventoryitemstatusProxy extends Inventoryitemstatus implements BindableProxy {
      private BindableProxyAgent<Inventoryitemstatus> agent;
      public com_cloderia_helion_client_shared_model_InventoryitemstatusProxy() {
        this(new Inventoryitemstatus());
      }

      public com_cloderia_helion_client_shared_model_InventoryitemstatusProxy(Inventoryitemstatus target) {
        agent = new BindableProxyAgent<Inventoryitemstatus>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Inventoryitemstatus.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Inventoryitemstatus unwrap() {
        return agent.target;
      }

      public Inventoryitemstatus deepUnwrap() {
        final Inventoryitemstatus clone = new Inventoryitemstatus();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InventoryitemstatusProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InventoryitemstatusProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Inventoryitemstatus) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Inventoryitemstatus.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InventoryitemstatusProxy((Inventoryitemstatus) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InventoryitemstatusProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementroleProxy extends Agreementrole implements BindableProxy {
      private BindableProxyAgent<Agreementrole> agent;
      public com_cloderia_helion_client_shared_model_AgreementroleProxy() {
        this(new Agreementrole());
      }

      public com_cloderia_helion_client_shared_model_AgreementroleProxy(Agreementrole target) {
        agent = new BindableProxyAgent<Agreementrole>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("agreement", new PropertyType(Agreement.class, true, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("agreementRoleTy", new PropertyType(Agreementroletype.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("party", new PropertyType(Party.class, true, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementrole.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementrole unwrap() {
        return agent.target;
      }

      public Agreementrole deepUnwrap() {
        final Agreementrole clone = new Agreementrole();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        if (agent.target.getAgreement() instanceof BindableProxy) {
          clone.setAgreement((Agreement) ((BindableProxy) getAgreement()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreement())) {
          clone.setAgreement((Agreement) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreement())).deepUnwrap());
        } else {
          clone.setAgreement(agent.target.getAgreement());
        }
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        if (agent.target.getAgreementRoleTy() instanceof BindableProxy) {
          clone.setAgreementRoleTy((Agreementroletype) ((BindableProxy) getAgreementRoleTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreementRoleTy())) {
          clone.setAgreementRoleTy((Agreementroletype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreementRoleTy())).deepUnwrap());
        } else {
          clone.setAgreementRoleTy(agent.target.getAgreementRoleTy());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        if (agent.target.getParty() instanceof BindableProxy) {
          clone.setParty((Party) ((BindableProxy) getParty()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParty())) {
          clone.setParty((Party) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParty())).deepUnwrap());
        } else {
          clone.setParty(agent.target.getParty());
        }
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementroleProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementroleProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public Agreement getAgreement() {
        return agent.target.getAgreement();
      }

      public void setAgreement(Agreement agreement) {
        if (agent.binders.containsKey("agreement")) {
          agreement = (Agreement) agent.binders.get("agreement").setModel(agreement, StateSync.FROM_MODEL, true);
        }
        Agreement oldValue = agent.target.getAgreement();
        agent.target.setAgreement(agreement);
        agent.updateWidgetsAndFireEvent(false, "agreement", oldValue, agreement);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Agreementroletype getAgreementRoleTy() {
        return agent.target.getAgreementRoleTy();
      }

      public void setAgreementRoleTy(Agreementroletype agreementRoleTy) {
        if (agent.binders.containsKey("agreementRoleTy")) {
          agreementRoleTy = (Agreementroletype) agent.binders.get("agreementRoleTy").setModel(agreementRoleTy, StateSync.FROM_MODEL, true);
        }
        Agreementroletype oldValue = agent.target.getAgreementRoleTy();
        agent.target.setAgreementRoleTy(agreementRoleTy);
        agent.updateWidgetsAndFireEvent(false, "agreementRoleTy", oldValue, agreementRoleTy);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Party getParty() {
        return agent.target.getParty();
      }

      public void setParty(Party party) {
        if (agent.binders.containsKey("party")) {
          party = (Party) agent.binders.get("party").setModel(party, StateSync.FROM_MODEL, true);
        }
        Party oldValue = agent.target.getParty();
        agent.target.setParty(party);
        agent.updateWidgetsAndFireEvent(false, "party", oldValue, party);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("agreement")) {
          return getAgreement();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("agreementRoleTy")) {
          return getAgreementRoleTy();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("party")) {
          return getParty();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("agreement")) {
          agent.target.setAgreement((Agreement) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("agreementRoleTy")) {
          agent.target.setAgreementRoleTy((Agreementroletype) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("party")) {
          agent.target.setParty((Party) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementrole) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementrole.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementroleProxy((Agreementrole) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementroleProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementroletypeProxy extends Agreementroletype implements BindableProxy {
      private BindableProxyAgent<Agreementroletype> agent;
      public com_cloderia_helion_client_shared_model_AgreementroletypeProxy() {
        this(new Agreementroletype());
      }

      public com_cloderia_helion_client_shared_model_AgreementroletypeProxy(Agreementroletype target) {
        agent = new BindableProxyAgent<Agreementroletype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreementroletype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreementroletype unwrap() {
        return agent.target;
      }

      public Agreementroletype deepUnwrap() {
        final Agreementroletype clone = new Agreementroletype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementroletypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementroletypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreementroletype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreementroletype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementroletypeProxy((Agreementroletype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementroletypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AgreementProxy extends Agreement implements BindableProxy {
      private BindableProxyAgent<Agreement> agent;
      public com_cloderia_helion_client_shared_model_AgreementProxy() {
        this(new Agreement());
      }

      public com_cloderia_helion_client_shared_model_AgreementProxy(Agreement target) {
        agent = new BindableProxyAgent<Agreement>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("agreementDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("partyRel", new PropertyType(Partyrelationship.class, true, false));
        agent.propertyTypes.put("agreementTy", new PropertyType(Agreementtype.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("text", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Agreement.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Agreement unwrap() {
        return agent.target;
      }

      public Agreement deepUnwrap() {
        final Agreement clone = new Agreement();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setAgreementDt(agent.target.getAgreementDt());
        clone.setDescription(agent.target.getDescription());
        if (agent.target.getPartyRel() instanceof BindableProxy) {
          clone.setPartyRel((Partyrelationship) ((BindableProxy) getPartyRel()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyRel())) {
          clone.setPartyRel((Partyrelationship) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyRel())).deepUnwrap());
        } else {
          clone.setPartyRel(agent.target.getPartyRel());
        }
        if (agent.target.getAgreementTy() instanceof BindableProxy) {
          clone.setAgreementTy((Agreementtype) ((BindableProxy) getAgreementTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAgreementTy())) {
          clone.setAgreementTy((Agreementtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAgreementTy())).deepUnwrap());
        } else {
          clone.setAgreementTy(agent.target.getAgreementTy());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setText(agent.target.getText());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AgreementProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AgreementProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getAgreementDt() {
        return agent.target.getAgreementDt();
      }

      public void setAgreementDt(Date agreementDt) {
        Date oldValue = agent.target.getAgreementDt();
        agent.target.setAgreementDt(agreementDt);
        agent.updateWidgetsAndFireEvent(false, "agreementDt", oldValue, agreementDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Partyrelationship getPartyRel() {
        return agent.target.getPartyRel();
      }

      public void setPartyRel(Partyrelationship partyRel) {
        if (agent.binders.containsKey("partyRel")) {
          partyRel = (Partyrelationship) agent.binders.get("partyRel").setModel(partyRel, StateSync.FROM_MODEL, true);
        }
        Partyrelationship oldValue = agent.target.getPartyRel();
        agent.target.setPartyRel(partyRel);
        agent.updateWidgetsAndFireEvent(false, "partyRel", oldValue, partyRel);
      }

      public Agreementtype getAgreementTy() {
        return agent.target.getAgreementTy();
      }

      public void setAgreementTy(Agreementtype agreementTy) {
        if (agent.binders.containsKey("agreementTy")) {
          agreementTy = (Agreementtype) agent.binders.get("agreementTy").setModel(agreementTy, StateSync.FROM_MODEL, true);
        }
        Agreementtype oldValue = agent.target.getAgreementTy();
        agent.target.setAgreementTy(agreementTy);
        agent.updateWidgetsAndFireEvent(false, "agreementTy", oldValue, agreementTy);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public BigDecimal getText() {
        return agent.target.getText();
      }

      public void setText(BigDecimal text) {
        BigDecimal oldValue = agent.target.getText();
        agent.target.setText(text);
        agent.updateWidgetsAndFireEvent(false, "text", oldValue, text);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("agreementDt")) {
          return getAgreementDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("partyRel")) {
          return getPartyRel();
        }
        if (property.equals("agreementTy")) {
          return getAgreementTy();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("text")) {
          return getText();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("agreementDt")) {
          agent.target.setAgreementDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("partyRel")) {
          agent.target.setPartyRel((Partyrelationship) value);
          return;
        }
        if (property.equals("agreementTy")) {
          agent.target.setAgreementTy((Agreementtype) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("text")) {
          agent.target.setText((BigDecimal) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Agreement) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Agreement.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AgreementProxy((Agreement) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AgreementProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_InvoiceroletypeProxy extends Invoiceroletype implements BindableProxy {
      private BindableProxyAgent<Invoiceroletype> agent;
      public com_cloderia_helion_client_shared_model_InvoiceroletypeProxy() {
        this(new Invoiceroletype());
      }

      public com_cloderia_helion_client_shared_model_InvoiceroletypeProxy(Invoiceroletype target) {
        agent = new BindableProxyAgent<Invoiceroletype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Invoiceroletype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Invoiceroletype unwrap() {
        return agent.target;
      }

      public Invoiceroletype deepUnwrap() {
        final Invoiceroletype clone = new Invoiceroletype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_InvoiceroletypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_InvoiceroletypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Invoiceroletype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Invoiceroletype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_InvoiceroletypeProxy((Invoiceroletype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_InvoiceroletypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyrelationshipProxy extends Partyrelationship implements BindableProxy {
      private BindableProxyAgent<Partyrelationship> agent;
      public com_cloderia_helion_client_shared_model_PartyrelationshipProxy() {
        this(new Partyrelationship());
      }

      public com_cloderia_helion_client_shared_model_PartyrelationshipProxy(Partyrelationship target) {
        agent = new BindableProxyAgent<Partyrelationship>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("termTy", new PropertyType(Terminationtype.class, true, false));
        agent.propertyTypes.put("termReason", new PropertyType(Terminationreason.class, true, false));
        agent.propertyTypes.put("fromPartyRole", new PropertyType(Partyrole.class, true, false));
        agent.propertyTypes.put("partyRel", new PropertyType(Partyrelationshiptype.class, true, false));
        agent.propertyTypes.put("partyRelStat", new PropertyType(Partyrelationshipstatus.class, true, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("toPartyRole", new PropertyType(Partyrole.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partyrelationship.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partyrelationship unwrap() {
        return agent.target;
      }

      public Partyrelationship deepUnwrap() {
        final Partyrelationship clone = new Partyrelationship();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getTermTy() instanceof BindableProxy) {
          clone.setTermTy((Terminationtype) ((BindableProxy) getTermTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTermTy())) {
          clone.setTermTy((Terminationtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTermTy())).deepUnwrap());
        } else {
          clone.setTermTy(agent.target.getTermTy());
        }
        if (agent.target.getTermReason() instanceof BindableProxy) {
          clone.setTermReason((Terminationreason) ((BindableProxy) getTermReason()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getTermReason())) {
          clone.setTermReason((Terminationreason) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getTermReason())).deepUnwrap());
        } else {
          clone.setTermReason(agent.target.getTermReason());
        }
        if (agent.target.getFromPartyRole() instanceof BindableProxy) {
          clone.setFromPartyRole((Partyrole) ((BindableProxy) getFromPartyRole()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getFromPartyRole())) {
          clone.setFromPartyRole((Partyrole) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getFromPartyRole())).deepUnwrap());
        } else {
          clone.setFromPartyRole(agent.target.getFromPartyRole());
        }
        if (agent.target.getPartyRel() instanceof BindableProxy) {
          clone.setPartyRel((Partyrelationshiptype) ((BindableProxy) getPartyRel()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyRel())) {
          clone.setPartyRel((Partyrelationshiptype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyRel())).deepUnwrap());
        } else {
          clone.setPartyRel(agent.target.getPartyRel());
        }
        if (agent.target.getPartyRelStat() instanceof BindableProxy) {
          clone.setPartyRelStat((Partyrelationshipstatus) ((BindableProxy) getPartyRelStat()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getPartyRelStat())) {
          clone.setPartyRelStat((Partyrelationshipstatus) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getPartyRelStat())).deepUnwrap());
        } else {
          clone.setPartyRelStat(agent.target.getPartyRelStat());
        }
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getToPartyRole() instanceof BindableProxy) {
          clone.setToPartyRole((Partyrole) ((BindableProxy) getToPartyRole()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToPartyRole())) {
          clone.setToPartyRole((Partyrole) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToPartyRole())).deepUnwrap());
        } else {
          clone.setToPartyRole(agent.target.getToPartyRole());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyrelationshipProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyrelationshipProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Terminationtype getTermTy() {
        return agent.target.getTermTy();
      }

      public void setTermTy(Terminationtype termTy) {
        if (agent.binders.containsKey("termTy")) {
          termTy = (Terminationtype) agent.binders.get("termTy").setModel(termTy, StateSync.FROM_MODEL, true);
        }
        Terminationtype oldValue = agent.target.getTermTy();
        agent.target.setTermTy(termTy);
        agent.updateWidgetsAndFireEvent(false, "termTy", oldValue, termTy);
      }

      public Terminationreason getTermReason() {
        return agent.target.getTermReason();
      }

      public void setTermReason(Terminationreason termReason) {
        if (agent.binders.containsKey("termReason")) {
          termReason = (Terminationreason) agent.binders.get("termReason").setModel(termReason, StateSync.FROM_MODEL, true);
        }
        Terminationreason oldValue = agent.target.getTermReason();
        agent.target.setTermReason(termReason);
        agent.updateWidgetsAndFireEvent(false, "termReason", oldValue, termReason);
      }

      public Partyrole getFromPartyRole() {
        return agent.target.getFromPartyRole();
      }

      public void setFromPartyRole(Partyrole fromPartyRole) {
        if (agent.binders.containsKey("fromPartyRole")) {
          fromPartyRole = (Partyrole) agent.binders.get("fromPartyRole").setModel(fromPartyRole, StateSync.FROM_MODEL, true);
        }
        Partyrole oldValue = agent.target.getFromPartyRole();
        agent.target.setFromPartyRole(fromPartyRole);
        agent.updateWidgetsAndFireEvent(false, "fromPartyRole", oldValue, fromPartyRole);
      }

      public Partyrelationshiptype getPartyRel() {
        return agent.target.getPartyRel();
      }

      public void setPartyRel(Partyrelationshiptype partyRel) {
        if (agent.binders.containsKey("partyRel")) {
          partyRel = (Partyrelationshiptype) agent.binders.get("partyRel").setModel(partyRel, StateSync.FROM_MODEL, true);
        }
        Partyrelationshiptype oldValue = agent.target.getPartyRel();
        agent.target.setPartyRel(partyRel);
        agent.updateWidgetsAndFireEvent(false, "partyRel", oldValue, partyRel);
      }

      public Partyrelationshipstatus getPartyRelStat() {
        return agent.target.getPartyRelStat();
      }

      public void setPartyRelStat(Partyrelationshipstatus partyRelStat) {
        if (agent.binders.containsKey("partyRelStat")) {
          partyRelStat = (Partyrelationshipstatus) agent.binders.get("partyRelStat").setModel(partyRelStat, StateSync.FROM_MODEL, true);
        }
        Partyrelationshipstatus oldValue = agent.target.getPartyRelStat();
        agent.target.setPartyRelStat(partyRelStat);
        agent.updateWidgetsAndFireEvent(false, "partyRelStat", oldValue, partyRelStat);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Partyrole getToPartyRole() {
        return agent.target.getToPartyRole();
      }

      public void setToPartyRole(Partyrole toPartyRole) {
        if (agent.binders.containsKey("toPartyRole")) {
          toPartyRole = (Partyrole) agent.binders.get("toPartyRole").setModel(toPartyRole, StateSync.FROM_MODEL, true);
        }
        Partyrole oldValue = agent.target.getToPartyRole();
        agent.target.setToPartyRole(toPartyRole);
        agent.updateWidgetsAndFireEvent(false, "toPartyRole", oldValue, toPartyRole);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("termTy")) {
          return getTermTy();
        }
        if (property.equals("termReason")) {
          return getTermReason();
        }
        if (property.equals("fromPartyRole")) {
          return getFromPartyRole();
        }
        if (property.equals("partyRel")) {
          return getPartyRel();
        }
        if (property.equals("partyRelStat")) {
          return getPartyRelStat();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("toPartyRole")) {
          return getToPartyRole();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("termTy")) {
          agent.target.setTermTy((Terminationtype) value);
          return;
        }
        if (property.equals("termReason")) {
          agent.target.setTermReason((Terminationreason) value);
          return;
        }
        if (property.equals("fromPartyRole")) {
          agent.target.setFromPartyRole((Partyrole) value);
          return;
        }
        if (property.equals("partyRel")) {
          agent.target.setPartyRel((Partyrelationshiptype) value);
          return;
        }
        if (property.equals("partyRelStat")) {
          agent.target.setPartyRelStat((Partyrelationshipstatus) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("toPartyRole")) {
          agent.target.setToPartyRole((Partyrole) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partyrelationship) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partyrelationship.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyrelationshipProxy((Partyrelationship) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyrelationshipProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_PartyroletypeProxy extends Partyroletype implements BindableProxy {
      private BindableProxyAgent<Partyroletype> agent;
      public com_cloderia_helion_client_shared_model_PartyroletypeProxy() {
        this(new Partyroletype());
      }

      public com_cloderia_helion_client_shared_model_PartyroletypeProxy(Partyroletype target) {
        agent = new BindableProxyAgent<Partyroletype>(this, target);
        agent.propertyTypes.put("parentRoleTy", new PropertyType(Partyroletype.class, true, false));
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Partyroletype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Partyroletype unwrap() {
        return agent.target;
      }

      public Partyroletype deepUnwrap() {
        final Partyroletype clone = new Partyroletype();
        if (agent.target.getParentRoleTy() instanceof BindableProxy) {
          clone.setParentRoleTy((Partyroletype) ((BindableProxy) getParentRoleTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentRoleTy())) {
          clone.setParentRoleTy((Partyroletype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentRoleTy())).deepUnwrap());
        } else {
          clone.setParentRoleTy(agent.target.getParentRoleTy());
        }
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_PartyroletypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_PartyroletypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public Partyroletype getParentRoleTy() {
        return agent.target.getParentRoleTy();
      }

      public void setParentRoleTy(Partyroletype parentRoleTy) {
        if (agent.binders.containsKey("parentRoleTy")) {
          parentRoleTy = (Partyroletype) agent.binders.get("parentRoleTy").setModel(parentRoleTy, StateSync.FROM_MODEL, true);
        }
        Partyroletype oldValue = agent.target.getParentRoleTy();
        agent.target.setParentRoleTy(parentRoleTy);
        agent.updateWidgetsAndFireEvent(false, "parentRoleTy", oldValue, parentRoleTy);
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("parentRoleTy")) {
          return getParentRoleTy();
        }
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("parentRoleTy")) {
          agent.target.setParentRoleTy((Partyroletype) value);
          return;
        }
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Partyroletype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Partyroletype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_PartyroletypeProxy((Partyroletype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_PartyroletypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy extends Organizationglaccountbalance implements BindableProxy {
      private BindableProxyAgent<Organizationglaccountbalance> agent;
      public com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy() {
        this(new Organizationglaccountbalance());
      }

      public com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy(Organizationglaccountbalance target) {
        agent = new BindableProxyAgent<Organizationglaccountbalance>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("amount", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("glAccount", new PropertyType(Organizationgeneralledgeraccount.class, true, false));
        agent.propertyTypes.put("accountingPeriod", new PropertyType(Accountingperiod.class, true, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Organizationglaccountbalance.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Organizationglaccountbalance unwrap() {
        return agent.target;
      }

      public Organizationglaccountbalance deepUnwrap() {
        final Organizationglaccountbalance clone = new Organizationglaccountbalance();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setAmount(agent.target.getAmount());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setName(agent.target.getName());
        clone.setId(agent.target.getId());
        if (agent.target.getGlAccount() instanceof BindableProxy) {
          clone.setGlAccount((Organizationgeneralledgeraccount) ((BindableProxy) getGlAccount()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getGlAccount())) {
          clone.setGlAccount((Organizationgeneralledgeraccount) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getGlAccount())).deepUnwrap());
        } else {
          clone.setGlAccount(agent.target.getGlAccount());
        }
        if (agent.target.getAccountingPeriod() instanceof BindableProxy) {
          clone.setAccountingPeriod((Accountingperiod) ((BindableProxy) getAccountingPeriod()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getAccountingPeriod())) {
          clone.setAccountingPeriod((Accountingperiod) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getAccountingPeriod())).deepUnwrap());
        } else {
          clone.setAccountingPeriod(agent.target.getAccountingPeriod());
        }
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy) {
          obj = ((com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public BigDecimal getAmount() {
        return agent.target.getAmount();
      }

      public void setAmount(BigDecimal amount) {
        BigDecimal oldValue = agent.target.getAmount();
        agent.target.setAmount(amount);
        agent.updateWidgetsAndFireEvent(false, "amount", oldValue, amount);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public Organizationgeneralledgeraccount getGlAccount() {
        return agent.target.getGlAccount();
      }

      public void setGlAccount(Organizationgeneralledgeraccount glAccount) {
        if (agent.binders.containsKey("glAccount")) {
          glAccount = (Organizationgeneralledgeraccount) agent.binders.get("glAccount").setModel(glAccount, StateSync.FROM_MODEL, true);
        }
        Organizationgeneralledgeraccount oldValue = agent.target.getGlAccount();
        agent.target.setGlAccount(glAccount);
        agent.updateWidgetsAndFireEvent(false, "glAccount", oldValue, glAccount);
      }

      public Accountingperiod getAccountingPeriod() {
        return agent.target.getAccountingPeriod();
      }

      public void setAccountingPeriod(Accountingperiod accountingPeriod) {
        if (agent.binders.containsKey("accountingPeriod")) {
          accountingPeriod = (Accountingperiod) agent.binders.get("accountingPeriod").setModel(accountingPeriod, StateSync.FROM_MODEL, true);
        }
        Accountingperiod oldValue = agent.target.getAccountingPeriod();
        agent.target.setAccountingPeriod(accountingPeriod);
        agent.updateWidgetsAndFireEvent(false, "accountingPeriod", oldValue, accountingPeriod);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("amount")) {
          return getAmount();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("glAccount")) {
          return getGlAccount();
        }
        if (property.equals("accountingPeriod")) {
          return getAccountingPeriod();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("amount")) {
          agent.target.setAmount((BigDecimal) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("glAccount")) {
          agent.target.setGlAccount((Organizationgeneralledgeraccount) value);
          return;
        }
        if (property.equals("accountingPeriod")) {
          agent.target.setAccountingPeriod((Accountingperiod) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Organizationglaccountbalance) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Organizationglaccountbalance.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy((Organizationglaccountbalance) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_OrganizationglaccountbalanceProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_FacilitytypeProxy extends Facilitytype implements BindableProxy {
      private BindableProxyAgent<Facilitytype> agent;
      public com_cloderia_helion_client_shared_model_FacilitytypeProxy() {
        this(new Facilitytype());
      }

      public com_cloderia_helion_client_shared_model_FacilitytypeProxy(Facilitytype target) {
        agent = new BindableProxyAgent<Facilitytype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Facilitytype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Facilitytype unwrap() {
        return agent.target;
      }

      public Facilitytype deepUnwrap() {
        final Facilitytype clone = new Facilitytype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_FacilitytypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_FacilitytypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Facilitytype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Facilitytype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_FacilitytypeProxy((Facilitytype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_FacilitytypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy extends Accountingtransactiontype implements BindableProxy {
      private BindableProxyAgent<Accountingtransactiontype> agent;
      public com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy() {
        this(new Accountingtransactiontype());
      }

      public com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy(Accountingtransactiontype target) {
        agent = new BindableProxyAgent<Accountingtransactiontype>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("parentTy", new PropertyType(Accountingtransactiontype.class, true, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Accountingtransactiontype.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Accountingtransactiontype unwrap() {
        return agent.target;
      }

      public Accountingtransactiontype deepUnwrap() {
        final Accountingtransactiontype clone = new Accountingtransactiontype();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        if (agent.target.getParentTy() instanceof BindableProxy) {
          clone.setParentTy((Accountingtransactiontype) ((BindableProxy) getParentTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentTy())) {
          clone.setParentTy((Accountingtransactiontype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentTy())).deepUnwrap());
        } else {
          clone.setParentTy(agent.target.getParentTy());
        }
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy) {
          obj = ((com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public Accountingtransactiontype getParentTy() {
        return agent.target.getParentTy();
      }

      public void setParentTy(Accountingtransactiontype parentTy) {
        if (agent.binders.containsKey("parentTy")) {
          parentTy = (Accountingtransactiontype) agent.binders.get("parentTy").setModel(parentTy, StateSync.FROM_MODEL, true);
        }
        Accountingtransactiontype oldValue = agent.target.getParentTy();
        agent.target.setParentTy(parentTy);
        agent.updateWidgetsAndFireEvent(false, "parentTy", oldValue, parentTy);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("parentTy")) {
          return getParentTy();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("parentTy")) {
          agent.target.setParentTy((Accountingtransactiontype) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Accountingtransactiontype) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Accountingtransactiontype.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy((Accountingtransactiontype) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_AccountingtransactiontypeProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BudgetitemProxy extends Budgetitem implements BindableProxy {
      private BindableProxyAgent<Budgetitem> agent;
      public com_cloderia_helion_client_shared_model_BudgetitemProxy() {
        this(new Budgetitem());
      }

      public com_cloderia_helion_client_shared_model_BudgetitemProxy(Budgetitem target) {
        agent = new BindableProxyAgent<Budgetitem>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("amount", new PropertyType(BigDecimal.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("purpose", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("itemTy", new PropertyType(Budgetitemtype.class, true, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("parentItem", new PropertyType(Budgetitem.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("justification", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("budget", new PropertyType(Budget.class, true, false));
        agent.propertyTypes.put("this", new PropertyType(Budgetitem.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Budgetitem unwrap() {
        return agent.target;
      }

      public Budgetitem deepUnwrap() {
        final Budgetitem clone = new Budgetitem();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setAmount(agent.target.getAmount());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setPurpose(agent.target.getPurpose());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        if (agent.target.getItemTy() instanceof BindableProxy) {
          clone.setItemTy((Budgetitemtype) ((BindableProxy) getItemTy()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getItemTy())) {
          clone.setItemTy((Budgetitemtype) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getItemTy())).deepUnwrap());
        } else {
          clone.setItemTy(agent.target.getItemTy());
        }
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getParentItem() instanceof BindableProxy) {
          clone.setParentItem((Budgetitem) ((BindableProxy) getParentItem()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getParentItem())) {
          clone.setParentItem((Budgetitem) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getParentItem())).deepUnwrap());
        } else {
          clone.setParentItem(agent.target.getParentItem());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setJustification(agent.target.getJustification());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        if (agent.target.getBudget() instanceof BindableProxy) {
          clone.setBudget((Budget) ((BindableProxy) getBudget()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getBudget())) {
          clone.setBudget((Budget) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getBudget())).deepUnwrap());
        } else {
          clone.setBudget(agent.target.getBudget());
        }
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BudgetitemProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BudgetitemProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public BigDecimal getAmount() {
        return agent.target.getAmount();
      }

      public void setAmount(BigDecimal amount) {
        BigDecimal oldValue = agent.target.getAmount();
        agent.target.setAmount(amount);
        agent.updateWidgetsAndFireEvent(false, "amount", oldValue, amount);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public String getPurpose() {
        return agent.target.getPurpose();
      }

      public void setPurpose(String purpose) {
        String oldValue = agent.target.getPurpose();
        agent.target.setPurpose(purpose);
        agent.updateWidgetsAndFireEvent(false, "purpose", oldValue, purpose);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public Budgetitemtype getItemTy() {
        return agent.target.getItemTy();
      }

      public void setItemTy(Budgetitemtype itemTy) {
        if (agent.binders.containsKey("itemTy")) {
          itemTy = (Budgetitemtype) agent.binders.get("itemTy").setModel(itemTy, StateSync.FROM_MODEL, true);
        }
        Budgetitemtype oldValue = agent.target.getItemTy();
        agent.target.setItemTy(itemTy);
        agent.updateWidgetsAndFireEvent(false, "itemTy", oldValue, itemTy);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Budgetitem getParentItem() {
        return agent.target.getParentItem();
      }

      public void setParentItem(Budgetitem parentItem) {
        if (agent.binders.containsKey("parentItem")) {
          parentItem = (Budgetitem) agent.binders.get("parentItem").setModel(parentItem, StateSync.FROM_MODEL, true);
        }
        Budgetitem oldValue = agent.target.getParentItem();
        agent.target.setParentItem(parentItem);
        agent.updateWidgetsAndFireEvent(false, "parentItem", oldValue, parentItem);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getJustification() {
        return agent.target.getJustification();
      }

      public void setJustification(String justification) {
        String oldValue = agent.target.getJustification();
        agent.target.setJustification(justification);
        agent.updateWidgetsAndFireEvent(false, "justification", oldValue, justification);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Budget getBudget() {
        return agent.target.getBudget();
      }

      public void setBudget(Budget budget) {
        if (agent.binders.containsKey("budget")) {
          budget = (Budget) agent.binders.get("budget").setModel(budget, StateSync.FROM_MODEL, true);
        }
        Budget oldValue = agent.target.getBudget();
        agent.target.setBudget(budget);
        agent.updateWidgetsAndFireEvent(false, "budget", oldValue, budget);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("amount")) {
          return getAmount();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("purpose")) {
          return getPurpose();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("itemTy")) {
          return getItemTy();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("parentItem")) {
          return getParentItem();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("justification")) {
          return getJustification();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("budget")) {
          return getBudget();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("amount")) {
          agent.target.setAmount((BigDecimal) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("purpose")) {
          agent.target.setPurpose((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("itemTy")) {
          agent.target.setItemTy((Budgetitemtype) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("parentItem")) {
          agent.target.setParentItem((Budgetitem) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("justification")) {
          agent.target.setJustification((String) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("budget")) {
          agent.target.setBudget((Budget) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Budgetitem) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Budgetitem.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BudgetitemProxy((Budgetitem) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BudgetitemProxy();
      }
    });
    class com_cloderia_helion_client_shared_model_BillingaccountProxy extends Billingaccount implements BindableProxy {
      private BindableProxyAgent<Billingaccount> agent;
      public com_cloderia_helion_client_shared_model_BillingaccountProxy() {
        this(new Billingaccount());
      }

      public com_cloderia_helion_client_shared_model_BillingaccountProxy(Billingaccount target) {
        agent = new BindableProxyAgent<Billingaccount>(this, target);
        agent.propertyTypes.put("lastModifiedUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("entityCode", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("rowTs", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("recSt", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("effectiveDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("description", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("fromDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("createdDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("universe", new PropertyType(Universe.class, true, false));
        agent.propertyTypes.put("toContMech", new PropertyType(Contactmechanism.class, true, false));
        agent.propertyTypes.put("name", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("versionNo", new PropertyType(Integer.class, false, false));
        agent.propertyTypes.put("id", new PropertyType(Long.class, false, false));
        agent.propertyTypes.put("createdByUsr", new PropertyType(String.class, false, false));
        agent.propertyTypes.put("toDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("lastModifiedDt", new PropertyType(Date.class, false, false));
        agent.propertyTypes.put("this", new PropertyType(Billingaccount.class, true, false));
        agent.copyValues();
      }

      public BindableProxyAgent getBindableProxyAgent() {
        return agent;
      }

      public void updateWidgets() {
        agent.updateWidgetsAndFireEvents();
      }

      public Billingaccount unwrap() {
        return agent.target;
      }

      public Billingaccount deepUnwrap() {
        final Billingaccount clone = new Billingaccount();
        clone.setLastModifiedUsr(agent.target.getLastModifiedUsr());
        clone.setEntityCode(agent.target.getEntityCode());
        clone.setRowTs(agent.target.getRowTs());
        clone.setRecSt(agent.target.getRecSt());
        clone.setEffectiveDt(agent.target.getEffectiveDt());
        clone.setDescription(agent.target.getDescription());
        clone.setFromDt(agent.target.getFromDt());
        clone.setCreatedDt(agent.target.getCreatedDt());
        if (agent.target.getUniverse() instanceof BindableProxy) {
          clone.setUniverse((Universe) ((BindableProxy) getUniverse()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getUniverse())) {
          clone.setUniverse((Universe) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getUniverse())).deepUnwrap());
        } else {
          clone.setUniverse(agent.target.getUniverse());
        }
        if (agent.target.getToContMech() instanceof BindableProxy) {
          clone.setToContMech((Contactmechanism) ((BindableProxy) getToContMech()).deepUnwrap());
        } else if (BindableProxyFactory.isBindableType(agent.target.getToContMech())) {
          clone.setToContMech((Contactmechanism) ((BindableProxy) BindableProxyFactory.getBindableProxy(agent.target.getToContMech())).deepUnwrap());
        } else {
          clone.setToContMech(agent.target.getToContMech());
        }
        clone.setName(agent.target.getName());
        clone.setVersionNo(agent.target.getVersionNo());
        clone.setId(agent.target.getId());
        clone.setCreatedByUsr(agent.target.getCreatedByUsr());
        clone.setToDt(agent.target.getToDt());
        clone.setLastModifiedDt(agent.target.getLastModifiedDt());
        return clone;
      }

      public boolean equals(Object obj) {
        if (obj instanceof com_cloderia_helion_client_shared_model_BillingaccountProxy) {
          obj = ((com_cloderia_helion_client_shared_model_BillingaccountProxy) obj).unwrap();
        }
        return agent.target.equals(obj);
      }

      public int hashCode() {
        return agent.target.hashCode();
      }

      public String toString() {
        return agent.target.toString();
      }

      public String getLastModifiedUsr() {
        return agent.target.getLastModifiedUsr();
      }

      public void setLastModifiedUsr(String lastModifiedUsr) {
        String oldValue = agent.target.getLastModifiedUsr();
        agent.target.setLastModifiedUsr(lastModifiedUsr);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedUsr", oldValue, lastModifiedUsr);
      }

      public String getEntityCode() {
        return agent.target.getEntityCode();
      }

      public void setEntityCode(String entityCode) {
        String oldValue = agent.target.getEntityCode();
        agent.target.setEntityCode(entityCode);
        agent.updateWidgetsAndFireEvent(false, "entityCode", oldValue, entityCode);
      }

      public Date getRowTs() {
        return agent.target.getRowTs();
      }

      public void setRowTs(Date rowTs) {
        Date oldValue = agent.target.getRowTs();
        agent.target.setRowTs(rowTs);
        agent.updateWidgetsAndFireEvent(false, "rowTs", oldValue, rowTs);
      }

      public String getRecSt() {
        return agent.target.getRecSt();
      }

      public void setRecSt(String recSt) {
        String oldValue = agent.target.getRecSt();
        agent.target.setRecSt(recSt);
        agent.updateWidgetsAndFireEvent(false, "recSt", oldValue, recSt);
      }

      public Date getEffectiveDt() {
        return agent.target.getEffectiveDt();
      }

      public void setEffectiveDt(Date effectiveDt) {
        Date oldValue = agent.target.getEffectiveDt();
        agent.target.setEffectiveDt(effectiveDt);
        agent.updateWidgetsAndFireEvent(false, "effectiveDt", oldValue, effectiveDt);
      }

      public String getDescription() {
        return agent.target.getDescription();
      }

      public void setDescription(String description) {
        String oldValue = agent.target.getDescription();
        agent.target.setDescription(description);
        agent.updateWidgetsAndFireEvent(false, "description", oldValue, description);
      }

      public Date getFromDt() {
        return agent.target.getFromDt();
      }

      public void setFromDt(Date fromDt) {
        Date oldValue = agent.target.getFromDt();
        agent.target.setFromDt(fromDt);
        agent.updateWidgetsAndFireEvent(false, "fromDt", oldValue, fromDt);
      }

      public Date getCreatedDt() {
        return agent.target.getCreatedDt();
      }

      public void setCreatedDt(Date createdDt) {
        Date oldValue = agent.target.getCreatedDt();
        agent.target.setCreatedDt(createdDt);
        agent.updateWidgetsAndFireEvent(false, "createdDt", oldValue, createdDt);
      }

      public Universe getUniverse() {
        return agent.target.getUniverse();
      }

      public void setUniverse(Universe universe) {
        if (agent.binders.containsKey("universe")) {
          universe = (Universe) agent.binders.get("universe").setModel(universe, StateSync.FROM_MODEL, true);
        }
        Universe oldValue = agent.target.getUniverse();
        agent.target.setUniverse(universe);
        agent.updateWidgetsAndFireEvent(false, "universe", oldValue, universe);
      }

      public Contactmechanism getToContMech() {
        return agent.target.getToContMech();
      }

      public void setToContMech(Contactmechanism toContMech) {
        if (agent.binders.containsKey("toContMech")) {
          toContMech = (Contactmechanism) agent.binders.get("toContMech").setModel(toContMech, StateSync.FROM_MODEL, true);
        }
        Contactmechanism oldValue = agent.target.getToContMech();
        agent.target.setToContMech(toContMech);
        agent.updateWidgetsAndFireEvent(false, "toContMech", oldValue, toContMech);
      }

      public String getName() {
        return agent.target.getName();
      }

      public void setName(String name) {
        String oldValue = agent.target.getName();
        agent.target.setName(name);
        agent.updateWidgetsAndFireEvent(false, "name", oldValue, name);
      }

      public Integer getVersionNo() {
        return agent.target.getVersionNo();
      }

      public void setVersionNo(Integer versionNo) {
        Integer oldValue = agent.target.getVersionNo();
        agent.target.setVersionNo(versionNo);
        agent.updateWidgetsAndFireEvent(false, "versionNo", oldValue, versionNo);
      }

      public Long getId() {
        return agent.target.getId();
      }

      public void setId(Long id) {
        Long oldValue = agent.target.getId();
        agent.target.setId(id);
        agent.updateWidgetsAndFireEvent(false, "id", oldValue, id);
      }

      public String getCreatedByUsr() {
        return agent.target.getCreatedByUsr();
      }

      public void setCreatedByUsr(String createdByUsr) {
        String oldValue = agent.target.getCreatedByUsr();
        agent.target.setCreatedByUsr(createdByUsr);
        agent.updateWidgetsAndFireEvent(false, "createdByUsr", oldValue, createdByUsr);
      }

      public Date getToDt() {
        return agent.target.getToDt();
      }

      public void setToDt(Date toDt) {
        Date oldValue = agent.target.getToDt();
        agent.target.setToDt(toDt);
        agent.updateWidgetsAndFireEvent(false, "toDt", oldValue, toDt);
      }

      public Date getLastModifiedDt() {
        return agent.target.getLastModifiedDt();
      }

      public void setLastModifiedDt(Date lastModifiedDt) {
        Date oldValue = agent.target.getLastModifiedDt();
        agent.target.setLastModifiedDt(lastModifiedDt);
        agent.updateWidgetsAndFireEvent(false, "lastModifiedDt", oldValue, lastModifiedDt);
      }

      public Object get(String property) {
        if (property.equals("lastModifiedUsr")) {
          return getLastModifiedUsr();
        }
        if (property.equals("entityCode")) {
          return getEntityCode();
        }
        if (property.equals("rowTs")) {
          return getRowTs();
        }
        if (property.equals("recSt")) {
          return getRecSt();
        }
        if (property.equals("effectiveDt")) {
          return getEffectiveDt();
        }
        if (property.equals("description")) {
          return getDescription();
        }
        if (property.equals("fromDt")) {
          return getFromDt();
        }
        if (property.equals("createdDt")) {
          return getCreatedDt();
        }
        if (property.equals("universe")) {
          return getUniverse();
        }
        if (property.equals("toContMech")) {
          return getToContMech();
        }
        if (property.equals("name")) {
          return getName();
        }
        if (property.equals("versionNo")) {
          return getVersionNo();
        }
        if (property.equals("id")) {
          return getId();
        }
        if (property.equals("createdByUsr")) {
          return getCreatedByUsr();
        }
        if (property.equals("toDt")) {
          return getToDt();
        }
        if (property.equals("lastModifiedDt")) {
          return getLastModifiedDt();
        }
        if (property.equals("this")) {
          return agent.target;
        }
        throw new NonExistingPropertyException(property);
      }

      public void set(String property, Object value) {
        if (property.equals("lastModifiedUsr")) {
          agent.target.setLastModifiedUsr((String) value);
          return;
        }
        if (property.equals("entityCode")) {
          agent.target.setEntityCode((String) value);
          return;
        }
        if (property.equals("rowTs")) {
          agent.target.setRowTs((Date) value);
          return;
        }
        if (property.equals("recSt")) {
          agent.target.setRecSt((String) value);
          return;
        }
        if (property.equals("effectiveDt")) {
          agent.target.setEffectiveDt((Date) value);
          return;
        }
        if (property.equals("description")) {
          agent.target.setDescription((String) value);
          return;
        }
        if (property.equals("fromDt")) {
          agent.target.setFromDt((Date) value);
          return;
        }
        if (property.equals("createdDt")) {
          agent.target.setCreatedDt((Date) value);
          return;
        }
        if (property.equals("universe")) {
          agent.target.setUniverse((Universe) value);
          return;
        }
        if (property.equals("toContMech")) {
          agent.target.setToContMech((Contactmechanism) value);
          return;
        }
        if (property.equals("name")) {
          agent.target.setName((String) value);
          return;
        }
        if (property.equals("versionNo")) {
          agent.target.setVersionNo((Integer) value);
          return;
        }
        if (property.equals("id")) {
          agent.target.setId((Long) value);
          return;
        }
        if (property.equals("createdByUsr")) {
          agent.target.setCreatedByUsr((String) value);
          return;
        }
        if (property.equals("toDt")) {
          agent.target.setToDt((Date) value);
          return;
        }
        if (property.equals("lastModifiedDt")) {
          agent.target.setLastModifiedDt((Date) value);
          return;
        }
        if (property.equals("this")) {
          agent.target = (Billingaccount) value;
          return;
        }
        throw new NonExistingPropertyException(property);
      }

      public Map getBeanProperties() {
        final Map props = new HashMap(agent.propertyTypes);
        props.remove("this");
        return Collections.unmodifiableMap(props);
      }
    }
    BindableProxyFactory.addBindableProxy(Billingaccount.class, new BindableProxyProvider() {
      public BindableProxy getBindableProxy(Object model) {
        return new com_cloderia_helion_client_shared_model_BillingaccountProxy((Billingaccount) model);
      }
      public BindableProxy getBindableProxy() {
        return new com_cloderia_helion_client_shared_model_BillingaccountProxy();
      }
    });
  }
}